import { Infra } from './infra.model';
import { AdminService } from './admin.service';
import { AuthUser } from 'src/types/AuthUser';
import { Admin } from './admin.model';
import { OffsetPaginationArgs, PaginationArgs } from 'src/types/input-types.args';
import { InvitedUser } from './invited-user.model';
import { Team } from 'src/team/team.model';
import { TeamInvitation } from 'src/team-invitation/team-invitation.model';
import { ShortcodeWithUserEmail } from 'src/shortcode/shortcode.model';
import { InfraConfigService } from 'src/infra-config/infra-config.service';
import { EnableAndDisableSSOArgs, InfraConfigArgs } from 'src/infra-config/input-args';
import { InfraConfigEnum } from 'src/types/InfraConfig';
import { ServiceStatus } from 'src/infra-config/helper';
export declare class InfraResolver {
    private adminService;
    private infraConfigService;
    constructor(adminService: AdminService, infraConfigService: InfraConfigService);
    infra(admin: Admin): Infra;
    admins(): Promise<any>;
    userInfo(userUid: string): Promise<AuthUser>;
    allUsers(args: PaginationArgs): Promise<AuthUser[]>;
    allUsersV2(searchString: string, paginationOption: OffsetPaginationArgs): Promise<AuthUser[]>;
    invitedUsers(args: OffsetPaginationArgs): Promise<InvitedUser[]>;
    allTeams(args: PaginationArgs): Promise<Team[]>;
    teamInfo(teamID: string): Promise<Team>;
    membersCountInTeam(teamID: string): Promise<number>;
    collectionCountInTeam(teamID: string): Promise<number>;
    requestCountInTeam(teamID: string): Promise<number>;
    environmentCountInTeam(teamID: string): Promise<number>;
    pendingInvitationCountInTeam(teamID: string): Promise<TeamInvitation[]>;
    usersCount(): Promise<any>;
    teamsCount(): Promise<any>;
    teamCollectionsCount(): Promise<any>;
    teamRequestsCount(): Promise<any>;
    allShortcodes(args: PaginationArgs, userEmail: string): Promise<ShortcodeWithUserEmail[]>;
    infraConfigs(names: InfraConfigEnum[]): Promise<any>;
    allowedAuthProviders(): string[];
    updateInfraConfigs(infraConfigs: InfraConfigArgs[]): Promise<InfraConfigArgs[]>;
    toggleAnalyticsCollection(analyticsCollectionStatus: ServiceStatus): Promise<boolean>;
    resetInfraConfigs(): Promise<boolean>;
    enableAndDisableSSO(providerInfo: EnableAndDisableSSOArgs[]): Promise<boolean>;
    toggleSMTP(status: ServiceStatus): Promise<boolean>;
}
