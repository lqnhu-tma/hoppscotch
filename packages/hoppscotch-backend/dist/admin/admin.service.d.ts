import { UserService } from '../user/user.service';
import { PubSubService } from '../pubsub/pubsub.service';
import { PrismaService } from '../prisma/prisma.service';
import * as E from 'fp-ts/Either';
import { MailerService } from '../mailer/mailer.service';
import { InvitedUser } from './invited-user.model';
import { TeamService } from '../team/team.service';
import { TeamCollectionService } from '../team-collection/team-collection.service';
import { TeamRequestService } from '../team-request/team-request.service';
import { TeamEnvironmentsService } from '../team-environments/team-environments.service';
import { TeamInvitationService } from '../team-invitation/team-invitation.service';
import { TeamMemberRole } from '../team/team.model';
import { ShortcodeService } from 'src/shortcode/shortcode.service';
import { ConfigService } from '@nestjs/config';
import { OffsetPaginationArgs } from 'src/types/input-types.args';
import { UserDeletionResult } from 'src/user/user.model';
export declare class AdminService {
    private readonly userService;
    private readonly teamService;
    private readonly teamCollectionService;
    private readonly teamRequestService;
    private readonly teamEnvironmentsService;
    private readonly teamInvitationService;
    private readonly pubsub;
    private readonly prisma;
    private readonly mailerService;
    private readonly shortcodeService;
    private readonly configService;
    constructor(userService: UserService, teamService: TeamService, teamCollectionService: TeamCollectionService, teamRequestService: TeamRequestService, teamEnvironmentsService: TeamEnvironmentsService, teamInvitationService: TeamInvitationService, pubsub: PubSubService, prisma: PrismaService, mailerService: MailerService, shortcodeService: ShortcodeService, configService: ConfigService);
    fetchUsers(cursorID: string, take: number): Promise<any>;
    fetchUsersV2(searchString: string, paginationOption: OffsetPaginationArgs): Promise<any>;
    inviteUserToSignInViaEmail(adminUID: string, adminEmail: string, inviteeEmail: string): Promise<E.Left<"invalid/email"> | E.Left<"email/both_emails_cannot_be_same"> | E.Left<"admin/user_already_invited"> | E.Left<"email/failed"> | E.Right<InvitedUser>>;
    updateUserDisplayName(userUid: string, displayName: string): Promise<E.Right<boolean> | E.Left<"user/not_found" | "user/short_display_name">>;
    revokeUserInvitations(inviteeEmails: string[]): Promise<E.Right<boolean> | E.Left<"user/invitation_deletion_failed">>;
    fetchInvitedUsers(paginationOption: OffsetPaginationArgs): Promise<InvitedUser[]>;
    fetchAllTeams(cursorID: string, take: number): Promise<any>;
    membersCountInTeam(teamID: string): Promise<any>;
    collectionCountInTeam(teamID: string): Promise<any>;
    requestCountInTeam(teamID: string): Promise<any>;
    environmentCountInTeam(teamID: string): Promise<any>;
    pendingInvitationCountInTeam(teamID: string): Promise<import("../team-invitation/team-invitation.model").TeamInvitation[]>;
    changeRoleOfUserTeam(userUid: string, teamID: string, newRole: TeamMemberRole): Promise<E.Left<string> | E.Right<import("../team/team.model").TeamMember>>;
    removeUserFromTeam(userUid: string, teamID: string): Promise<E.Left<string> | E.Right<boolean>>;
    addUserToTeam(teamID: string, userEmail: string, role: TeamMemberRole): Promise<E.Left<string> | E.Right<import("../team/team.model").TeamMember>>;
    createATeam(userUid: string, name: string): Promise<E.Left<string> | E.Right<import("../team/team.model").Team>>;
    renameATeam(teamID: string, newName: string): Promise<E.Left<string> | E.Right<import("../team/team.model").Team>>;
    deleteATeam(teamID: string): Promise<E.Left<string> | E.Right<boolean>>;
    fetchAdmins(): Promise<any>;
    fetchUserInfo(userUid: string): Promise<E.Left<"user/not_found"> | E.Right<User>>;
    removeUserAccount(userUid: string): Promise<E.Left<string> | E.Right<boolean>>;
    removeUserAccounts(userUIDs: string[]): Promise<E.Left<"user/users_not_found"> | E.Right<UserDeletionResult[]>>;
    makeUserAdmin(userUID: string): Promise<E.Left<"user/not_found"> | E.Right<boolean>>;
    makeUsersAdmin(userUIDs: string[]): Promise<E.Left<"user/update_failed"> | E.Right<boolean>>;
    removeUserAsAdmin(userUID: string): Promise<E.Left<"user/not_found"> | E.Right<boolean> | E.Left<"admin/only_one_admin_account_found">>;
    demoteUsersByAdmin(userUIDs: string[]): Promise<E.Right<boolean> | E.Left<"user/users_not_found"> | E.Left<"admin/only_one_admin_account_found">>;
    getUsersCount(): Promise<any>;
    getTeamsCount(): Promise<any>;
    getTeamCollectionsCount(): Promise<any>;
    getTeamRequestsCount(): Promise<any>;
    getTeamInfo(teamID: string): Promise<E.Left<"team/invalid_id"> | E.Right<import("../team/team.model").Team>>;
    revokeTeamInviteByID(inviteID: string): Promise<E.Right<boolean> | E.Left<"team_invite/no_invite_found">>;
    fetchAllShortcodes(cursorID: string, take: number, userEmail?: string): Promise<import("../shortcode/shortcode.model").ShortcodeWithUserEmail[]>;
    deleteShortcode(shortcodeID: string): Promise<E.Right<boolean> | E.Left<"shortcode/not_found">>;
}
