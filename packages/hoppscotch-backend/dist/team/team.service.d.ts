import { OnModuleInit } from '@nestjs/common';
import { TeamMember, TeamMemberRole, Team } from './team.model';
import { PrismaService } from '../prisma/prisma.service';
import { UserService } from '../user/user.service';
import { UserDataHandler } from 'src/user/user.data.handler';
import { PubSubService } from '../pubsub/pubsub.service';
import * as TE from 'fp-ts/TaskEither';
import * as TO from 'fp-ts/TaskOption';
import * as E from 'fp-ts/Either';
import * as T from 'fp-ts/Task';
import { AuthUser } from '../types/AuthUser';
export declare class TeamService implements UserDataHandler, OnModuleInit {
    private readonly prisma;
    private readonly userService;
    private readonly pubsub;
    constructor(prisma: PrismaService, userService: UserService, pubsub: PubSubService);
    onModuleInit(): void;
    canAllowUserDeletion(user: AuthUser): TO.TaskOption<string>;
    onUserDelete(user: AuthUser): T.Task<void>;
    getCountOfUsersWithRoleInTeam(teamID: string, role: TeamMemberRole): Promise<number>;
    addMemberToTeamWithEmail(teamID: string, email: string, role: TeamMemberRole): Promise<E.Left<string> | E.Right<TeamMember>>;
    addMemberToTeam(teamID: string, uid: string, role: TeamMemberRole): Promise<TeamMember>;
    deleteTeam(teamID: string): Promise<E.Left<string> | E.Right<boolean>>;
    validateTeamName(title: string): E.Left<string> | E.Right<boolean>;
    renameTeam(teamID: string, newName: string): Promise<E.Left<string> | E.Right<Team>>;
    updateTeamMemberRole(teamID: string, userUid: string, newRole: TeamMemberRole): Promise<E.Left<string> | E.Right<TeamMember>>;
    leaveTeam(teamID: string, userUid: string): Promise<E.Left<string> | E.Right<boolean>>;
    createTeam(name: string, creatorUid: string): Promise<E.Left<string> | E.Right<Team>>;
    getTeamsOfUser(uid: string, cursor: string | null): Promise<Team[]>;
    getTeamWithID(teamID: string): Promise<Team | null>;
    getTeamWithIDTE(teamID: string): TE.TaskEither<'team/invalid_id', Team>;
    filterMismatchedUsers(teamID: string, members: TeamMember[]): Promise<TeamMember[]>;
    getTeamMember(teamID: string, userUid: string): Promise<TeamMember | null>;
    getTeamMemberTE(teamID: string, userUid: string): TE.TaskEither<"team/member_not_found", TeamMember>;
    getRoleOfUserInTeam(teamID: string, userUid: string): Promise<TeamMemberRole | null>;
    isUserOwnerRoleInTeams(uid: string): T.Task<boolean>;
    deleteUserFromAllTeams(uid: string): T.Task<any>;
    getTeamMembers(teamID: string): Promise<TeamMember[]>;
    getCountOfMembersInTeam(teamID: string): Promise<any>;
    getMembersOfTeam(teamID: string, cursor: string | null): Promise<TeamMember[]>;
    fetchAllTeams(cursorID: string, take: number): Promise<any>;
    getTeamsCount(): Promise<any>;
}
