import { PrismaService } from '../prisma/prisma.service';
import { TeamCollection } from './team-collection.model';
import { PubSubService } from '../pubsub/pubsub.service';
import * as E from 'fp-ts/Either';
import { CollectionSearchNode } from 'src/types/CollectionSearchNode';
import { GetCollectionResponse } from './helper';
import { RESTError } from 'src/types/RESTError';
import { TeamService } from 'src/team/team.service';
export declare class TeamCollectionService {
    private readonly prisma;
    private readonly pubsub;
    private readonly teamService;
    constructor(prisma: PrismaService, pubsub: PubSubService, teamService: TeamService);
    TITLE_LENGTH: number;
    private generatePrismaQueryObjForFBCollFolder;
    private exportCollectionToJSONObject;
    exportCollectionsToJSON(teamID: string): Promise<E.Right<string> | E.Left<unknown>>;
    importCollectionsFromJSON(jsonString: string, destTeamID: string, destCollectionID: string | null): Promise<E.Left<string> | E.Right<boolean>>;
    replaceCollectionsWithJSON(jsonString: string, destTeamID: string, destCollectionID: string | null): Promise<E.Left<string> | E.Right<boolean>>;
    private cast;
    getTeamOfCollection(collectionID: string): Promise<E.Right<any> | E.Left<"team/invalid_coll_id">>;
    getParentOfCollection(collectionID: string): Promise<TeamCollection>;
    getChildrenOfCollection(collectionID: string, cursor: string | null, take: number): Promise<any>;
    getTeamRootCollections(teamID: string, cursor: string | null, take: number): Promise<any>;
    getCollection(collectionID: string): Promise<E.Right<any> | E.Left<string>>;
    private isOwnerCheck;
    private getChildCollectionsCount;
    private getRootCollectionsCount;
    createCollection(teamID: string, title: string, data: string | null, parentTeamCollectionID: string | null): Promise<E.Left<string> | E.Right<TeamCollection>>;
    renameCollection(collectionID: string, newTitle: string): Promise<E.Left<string> | E.Right<TeamCollection>>;
    private updateOrderIndex;
    private removeTeamCollection;
    private deleteCollectionData;
    deleteCollection(collectionID: string): Promise<E.Left<string> | E.Right<boolean>>;
    private changeParent;
    private isParent;
    moveCollection(collectionID: string, destCollectionID: string | null): Promise<E.Left<string> | E.Right<TeamCollection>>;
    getCollectionCount(collectionID: string): Promise<number>;
    updateCollectionOrder(collectionID: string, nextCollectionID: string | null): Promise<E.Left<string> | E.Right<boolean>>;
    totalCollectionsInTeam(teamID: string): Promise<any>;
    getTeamCollectionsCount(): Promise<any>;
    updateTeamCollection(collectionID: string, collectionData?: string, newTitle?: string): Promise<E.Left<string> | E.Right<TeamCollection>>;
    searchByTitle(searchQuery: string, teamID: string, take?: number, skip?: number): Promise<E.Left<RESTError> | E.Right<{
        data: CollectionSearchNode[];
    }>>;
    private searchCollections;
    private searchRequests;
    private fetchParentTree;
    private fetchCollectionParentTree;
    private generateParentTree;
    private fetchRequestParentTree;
    private getAllRequestsInCollection;
    private getCollectionTreeForCLI;
    getCollectionForCLI(collectionID: string, userUid: string): Promise<E.Left<string> | E.Right<GetCollectionResponse>>;
}
