export type CellHeading = {
    key: string;
    label?: string;
    preventClick?: boolean;
};
declare const _default: <Item extends Record<string, unknown>>(__VLS_props: {
    list?: Item[] | undefined;
    onOnRowClicked?: ((item: Item) => any) | undefined;
    showYBorder?: boolean | undefined;
    headings?: CellHeading[] | undefined;
} & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, __VLS_ctx?: {
    attrs: any;
    slots: Partial<Record<string, (_: {
        item: Item;
    }) => any>> & {
        head?(_: {}): any;
        body?(_: {
            list: Item[] | undefined;
        }): any;
    };
    emit: (event: "onRowClicked", item: Item) => void;
} | undefined, __VLS_expose?: ((exposed: import('vue').ShallowUnwrapRef<{}>) => void) | undefined, __VLS_setup?: Promise<{
    props: {
        list?: Item[] | undefined;
        onOnRowClicked?: ((item: Item) => any) | undefined;
        showYBorder?: boolean | undefined;
        headings?: CellHeading[] | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{}>): void;
    attrs: any;
    slots: Partial<Record<string, (_: {
        item: Item;
    }) => any>> & {
        head?(_: {}): any;
        body?(_: {
            list: Item[] | undefined;
        }): any;
    };
    emit: (event: "onRowClicked", item: Item) => void;
}>) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: {
        props: {
            list?: Item[] | undefined;
            onOnRowClicked?: ((item: Item) => any) | undefined;
            showYBorder?: boolean | undefined;
            headings?: CellHeading[] | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
        expose(exposed: import('vue').ShallowUnwrapRef<{}>): void;
        attrs: any;
        slots: Partial<Record<string, (_: {
            item: Item;
        }) => any>> & {
            head?(_: {}): any;
            body?(_: {
                list: Item[] | undefined;
            }): any;
        };
        emit: (event: "onRowClicked", item: Item) => void;
    } | undefined;
};
export default _default;
