import type { Component, Ref } from "vue";
import { ComputedRef } from "vue";
export type TabMeta = {
    label: string | null;
    icon: string | Component | null;
    indicator: boolean;
    info: string | null;
    disabled: boolean;
};
export type TabProvider = {
    renderInactive: ComputedRef<boolean>;
    activeTabID: ComputedRef<string>;
    addTabEntry: (tabID: string, meta: TabMeta) => void;
    updateTabEntry: (tabID: string, newMeta: TabMeta) => void;
    removeTabEntry: (tabID: string) => void;
    isUnmounting: Ref<boolean>;
};
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    styles: {
        type: StringConstructor;
        default: string;
    };
    renderInactiveTabs: {
        type: BooleanConstructor;
        default: boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: StringConstructor;
        required: true;
    };
    contentStyles: {
        type: StringConstructor;
        default: string;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (newTabID: string) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    styles: {
        type: StringConstructor;
        default: string;
    };
    renderInactiveTabs: {
        type: BooleanConstructor;
        default: boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: StringConstructor;
        required: true;
    };
    contentStyles: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((newTabID: string) => any) | undefined;
}, {
    styles: string;
    renderInactiveTabs: boolean;
    vertical: boolean;
    contentStyles: string;
}, {}>, {
    actions?(_: {}): any;
    default?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
