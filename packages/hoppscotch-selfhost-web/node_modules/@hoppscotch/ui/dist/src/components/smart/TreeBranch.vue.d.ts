import { SmartTreeAdapter, TreeNode } from "~/helpers/treeAdapter";
declare const _default: <T extends unknown>(__VLS_props: any, __VLS_ctx?: {
    attrs: any;
    slots: {
        default?(_: any): any;
        emptyNode?(_: {
            node: TreeNode<T>;
        }): any;
    };
    emit: any;
} | undefined, __VLS_expose?: ((exposed: import('vue').ShallowUnwrapRef<{}>) => void) | undefined, __VLS_setup?: Promise<{
    props: {
        adapter: SmartTreeAdapter<T>;
        nodeItem: TreeNode<T>;
        rootNodesLength?: number | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
    expose(exposed: import('vue').ShallowUnwrapRef<{}>): void;
    attrs: any;
    slots: {
        default?(_: any): any;
        emptyNode?(_: {
            node: TreeNode<T>;
        }): any;
    };
    emit: any;
}>) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: {
        props: {
            adapter: SmartTreeAdapter<T>;
            nodeItem: TreeNode<T>;
            rootNodesLength?: number | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
        expose(exposed: import('vue').ShallowUnwrapRef<{}>): void;
        attrs: any;
        slots: {
            default?(_: any): any;
            emptyNode?(_: {
                node: TreeNode<T>;
            }): any;
        };
        emit: any;
    } | undefined;
};
export default _default;
