{"version":3,"file":"oauth-c3b4abdc.js","sources":["../../../hoppscotch-common/src/pages/oauth.vue"],"sourcesContent":["<template>\n  <div class=\"flex items-center justify-center\">\n    <HoppSmartSpinner />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useI18n } from \"~/composables/i18n\"\nimport { useToast } from \"~/composables/toast\"\n\nimport { useService } from \"dioc/vue\"\nimport * as E from \"fp-ts/Either\"\nimport { onMounted } from \"vue\"\nimport { RESTTabService } from \"~/services/tab/rest\"\n\nimport { useRouter } from \"vue-router\"\n\nimport {\n  PersistedOAuthConfig,\n  routeOAuthRedirect,\n} from \"~/services/oauth/oauth.service\"\nimport { PersistenceService } from \"~/services/persistence\"\nimport { GQLTabService } from \"~/services/tab/graphql\"\n\nconst t = useI18n()\nconst router = useRouter()\n\nconst toast = useToast()\n\nconst gqlTabs = useService(GQLTabService)\nconst persistenceService = useService(PersistenceService)\nconst restTabs = useService(RESTTabService)\n\nfunction translateOAuthRedirectError(error: string) {\n  switch (error) {\n    case \"AUTH_SERVER_RETURNED_ERROR\":\n      return t(\"authorization.oauth.redirect_auth_server_returned_error\")\n\n    case \"NO_AUTH_CODE\":\n      return t(\"authorization.oauth.redirect_no_auth_code\")\n\n    case \"INVALID_STATE\":\n      return t(\"authorization.oauth.redirect_invalid_state\")\n\n    case \"NO_TOKEN_ENDPOINT\":\n      return t(\"authorization.oauth.redirect_no_token_endpoint\")\n\n    case \"NO_CLIENT_ID\":\n      return t(\"authorization.oauth.redirect_no_client_id\")\n\n    case \"NO_CLIENT_SECRET\":\n      return t(\"authorization.oauth.redirect_no_client_secret\")\n\n    case \"NO_CODE_VERIFIER\":\n      return t(\"authorization.oauth.redirect_no_code_verifier\")\n\n    case \"AUTH_TOKEN_REQUEST_FAILED\":\n      return t(\"authorization.oauth.redirect_auth_token_request_failed\")\n\n    case \"AUTH_TOKEN_REQUEST_INVALID_RESPONSE\":\n      return t(\n        \"authorization.oauth.redirect_auth_token_request_invalid_response\"\n      )\n\n    default:\n      return t(\"authorization.oauth.something_went_wrong_on_oauth_redirect\")\n  }\n}\n\nonMounted(async () => {\n  const localOAuthTempConfig =\n    persistenceService.getLocalConfig(\"oauth_temp_config\")\n\n  if (!localOAuthTempConfig) {\n    toast.error(t(\"authorization.oauth.something_went_wrong_on_oauth_redirect\"))\n    router.push(\"/\")\n    return\n  }\n\n  const persistedOAuthConfig: PersistedOAuthConfig =\n    JSON.parse(localOAuthTempConfig)\n\n  const { context, source } = persistedOAuthConfig\n\n  const tokenInfo = await routeOAuthRedirect()\n\n  if (E.isLeft(tokenInfo)) {\n    toast.error(translateOAuthRedirectError(tokenInfo.left))\n    router.push(source === \"REST\" ? \"/\" : \"/graphql\")\n    return\n  }\n\n  // Indicates the access token generation flow originated from the modal for setting authorization/headers at the collection level\n  if (context?.type === \"collection-properties\") {\n    // Set the access token in `localStorage` to retrieve from the modal while redirecting back\n    const authConfig: PersistedOAuthConfig = {\n      ...persistedOAuthConfig,\n      token: tokenInfo.right.access_token,\n    }\n    persistenceService.setLocalConfig(\n      \"oauth_temp_config\",\n      JSON.stringify(authConfig)\n    )\n\n    toast.success(t(\"authorization.oauth.token_fetched_successfully\"))\n\n    router.push(source === \"REST\" ? \"/\" : \"/graphql\")\n    return\n  }\n\n  const routeToRedirect = source === \"GraphQL\" ? \"/graphql\" : \"/\"\n  const tabService = source === \"GraphQL\" ? gqlTabs : restTabs\n\n  if (\n    tabService.currentActiveTab.value.document.request.auth.authType ===\n    \"oauth-2\"\n  ) {\n    tabService.currentActiveTab.value.document.request.auth.grantTypeInfo.token =\n      tokenInfo.right.access_token\n\n    toast.success(t(\"authorization.oauth.token_fetched_successfully\"))\n  }\n\n  router.push(routeToRedirect)\n})\n</script>\n"],"names":["useI18n","router","useRouter","toast","useToast","gqlTabs","useService","GQLTabService","persistenceService","PersistenceService","restTabs","RESTTabService","translateOAuthRedirectError","error","onMounted","localOAuthTempConfig","persistedOAuthConfig","context","source","tokenInfo","routeOAuthRedirect","E.isLeft","authConfig","routeToRedirect","tabService"],"mappings":"2QAwBA,MAAA,EAAAA,IACAC,EAAAC,IAEAC,EAAAC,IAEAC,EAAAC,EAAAC,CAAA,EACAC,EAAAF,EAAAG,CAAA,EACAC,EAAAJ,EAAAK,CAAA,EAEA,SAAAC,EAAAC,EAAA,CACE,OAAAA,EAAA,CAAe,IAAA,6BAEX,OAAA,EAAA,yDAAA,EAAkE,IAAA,eAGlE,OAAA,EAAA,2CAAA,EAAoD,IAAA,gBAGpD,OAAA,EAAA,4CAAA,EAAqD,IAAA,oBAGrD,OAAA,EAAA,gDAAA,EAAyD,IAAA,eAGzD,OAAA,EAAA,2CAAA,EAAoD,IAAA,mBAGpD,OAAA,EAAA,+CAAA,EAAwD,IAAA,mBAGxD,OAAA,EAAA,+CAAA,EAAwD,IAAA,4BAGxD,OAAA,EAAA,wDAAA,EAAiE,IAAA,sCAGjE,OAAA,EAAO,kEACL,EACF,QAGA,OAAA,EAAA,4DAAA,CAAqE,CACzE,CAGF,OAAAC,EAAA,SAAA,CACE,MAAAC,EAAAP,EAAA,eAAA,mBAAA,EAGA,GAAA,CAAAO,EAAA,CACEZ,EAAA,MAAA,EAAA,4DAAA,CAAA,EACAF,EAAA,KAAA,GAAA,EACA,MAAA,CAGF,MAAAe,EAAA,KAAA,MAAAD,CAAA,EAGA,CAAA,QAAAE,EAAA,OAAAC,CAAA,EAAAF,EAEAG,EAAA,MAAAC,IAEA,GAAAC,EAAAF,CAAA,EAAA,CACEhB,EAAA,MAAAS,EAAAO,EAAA,IAAA,CAAA,EACAlB,EAAA,KAAAiB,IAAA,OAAA,IAAA,UAAA,EACA,MAAA,CAIF,IAAAD,GAAA,YAAAA,EAAA,QAAA,wBAAA,CAEE,MAAAK,EAAA,CAAyC,GAAAN,EACpC,MAAAG,EAAA,MAAA,YACoB,EAEzBX,EAAA,eAAmB,oBACjB,KAAA,UAAAc,CAAA,CACyB,EAG3BnB,EAAA,QAAA,EAAA,gDAAA,CAAA,EAEAF,EAAA,KAAAiB,IAAA,OAAA,IAAA,UAAA,EACA,MAAA,CAGF,MAAAK,EAAAL,IAAA,UAAA,WAAA,IACAM,EAAAN,IAAA,UAAAb,EAAAK,EAEAc,EAAA,iBAAA,MAAA,SAAA,QAAA,KAAA,WAAA,YAIEA,EAAA,iBAAA,MAAA,SAAA,QAAA,KAAA,cAAA,MAAAL,EAAA,MAAA,aAGAhB,EAAA,QAAA,EAAA,gDAAA,CAAA,GAGFF,EAAA,KAAAsB,CAAA,CAA2B,CAAA"}