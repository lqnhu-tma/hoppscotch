{"version":3,"file":"auth-6cc8f15f.js","sources":["../../../hoppscotch-common/src/composables/auth.ts"],"sourcesContent":["import { platform } from \"~/platform\"\nimport { AuthEvent, HoppUser } from \"~/platform/auth\"\nimport { Subscription } from \"rxjs\"\nimport { onBeforeUnmount, onMounted, watch, WatchStopHandle } from \"vue\"\nimport { useReadonlyStream } from \"./stream\"\n\n/**\n * A Vue composable function that is called when the auth status\n * is being updated to being logged in (fired multiple times),\n * this is also called on component mount if the login\n * was already resolved before mount.\n */\nexport function onLoggedIn(exec: (user: HoppUser) => void) {\n  const currentUser = useReadonlyStream(\n    platform.auth.getCurrentUserStream(),\n    platform.auth.getCurrentUser()\n  )\n\n  let watchStop: WatchStopHandle | null = null\n\n  onMounted(() => {\n    if (currentUser.value) exec(currentUser.value)\n\n    watchStop = watch(currentUser, (newVal, prev) => {\n      if (prev === null && newVal !== null) {\n        exec(newVal)\n      }\n    })\n  })\n\n  onBeforeUnmount(() => {\n    watchStop?.()\n  })\n}\n\n/**\n * A Vue composable function that calls its param function\n * when a new event (login, logout etc.) happens in\n * the auth system.\n *\n * NOTE: Unlike `onLoggedIn` for which the callback will be called once on mount with the current state,\n * here the callback will only be called on authentication event occurrences.\n * You might want to check the auth state from an `onMounted` hook or something\n * if you want to access the initial state\n *\n * @param func A function which accepts an event\n */\nexport function onAuthEvent(func: (ev: AuthEvent) => void) {\n  const authEvents$ = platform.auth.getAuthEventsStream()\n\n  let sub: Subscription | null = null\n\n  onMounted(() => {\n    sub = authEvents$.subscribe((ev) => {\n      func(ev)\n    })\n  })\n\n  onBeforeUnmount(() => {\n    sub?.unsubscribe()\n  })\n}\n"],"names":["onLoggedIn","exec","currentUser","useReadonlyStream","platform","watchStop","onMounted","watch","newVal","prev","onBeforeUnmount","onAuthEvent","func","authEvents$","sub","ev"],"mappings":"uEAYO,SAASA,EAAWC,EAAgC,CACzD,MAAMC,EAAcC,EAClBC,EAAS,KAAK,qBAAqB,EACnCA,EAAS,KAAK,eAAe,CAAA,EAG/B,IAAIC,EAAoC,KAExCC,EAAU,IAAM,CACVJ,EAAY,OAAOD,EAAKC,EAAY,KAAK,EAE7CG,EAAYE,EAAML,EAAa,CAACM,EAAQC,IAAS,CAC3CA,IAAS,MAAQD,IAAW,MAC9BP,EAAKO,CAAM,CACb,CACD,CAAA,CACF,EAEDE,EAAgB,IAAM,CACRL,GAAA,MAAAA,GAAA,CACb,CACH,CAcO,SAASM,EAAYC,EAA+B,CACnD,MAAAC,EAAcT,EAAS,KAAK,oBAAoB,EAEtD,IAAIU,EAA2B,KAE/BR,EAAU,IAAM,CACRQ,EAAAD,EAAY,UAAWE,GAAO,CAClCH,EAAKG,CAAE,CAAA,CACR,CAAA,CACF,EAEDL,EAAgB,IAAM,CACpBI,GAAA,MAAAA,EAAK,aAAY,CAClB,CACH"}