{"version":3,"file":"import-754ba14d.js","sources":["../../../hoppscotch-common/src/helpers/functional/primtive.ts","../../../hoppscotch-common/src/pages/import.vue"],"sourcesContent":["export type JSPrimitive =\n  | \"undefined\"\n  | \"object\"\n  | \"boolean\"\n  | \"number\"\n  | \"bigint\"\n  | \"string\"\n  | \"symbol\"\n  | \"function\"\n\nexport type TypeFromPrimitive<P extends JSPrimitive | undefined> =\n  P extends \"undefined\"\n    ? undefined\n    : P extends \"object\"\n      ? object | null // typeof null === \"object\"\n      : P extends \"boolean\"\n        ? boolean\n        : P extends \"number\"\n          ? number\n          : P extends \"bigint\"\n            ? bigint\n            : P extends \"string\"\n              ? string\n              : P extends \"symbol\"\n                ? symbol\n                : P extends \"function\"\n                  ? Function // eslint-disable-line @typescript-eslint/ban-types\n                  : unknown\n\n// The ban-types silence is because in this case,\n// we can't get the Function type info to make a better guess\n\nexport const isOfType =\n  <T extends JSPrimitive>(type: T) =>\n  (value: unknown): value is T =>\n    // eslint-disable-next-line valid-typeof\n    typeof value === type\n","<template>\n  <div></div>\n</template>\n\n<script setup lang=\"ts\">\nimport axios from \"axios\"\nimport * as TO from \"fp-ts/TaskOption\"\nimport * as TE from \"fp-ts/TaskEither\"\nimport * as RA from \"fp-ts/ReadonlyArray\"\n\nimport { onMounted } from \"vue\"\nimport { useRoute, useRouter } from \"vue-router\"\nimport * as E from \"fp-ts/Either\"\nimport { pipe } from \"fp-ts/function\"\nimport { HoppCollection } from \"@hoppscotch/data\"\nimport { appendRESTCollections } from \"~/newstore/collections\"\nimport { useI18n } from \"@composables/i18n\"\nimport { useToast } from \"@composables/toast\"\nimport { IMPORTER_INVALID_FILE_FORMAT } from \"~/helpers/import-export/import\"\nimport { OPENAPI_DEREF_ERROR } from \"~/helpers/import-export/import/openapi\"\nimport { isOfType } from \"~/helpers/functional/primtive\"\nimport { TELeftType } from \"~/helpers/functional/taskEither\"\n\nimport {\n  hoppRESTImporter,\n  hoppPostmanImporter,\n  hoppInsomniaImporter,\n  hoppOpenAPIImporter,\n} from \"~/helpers/import-export/import/importers\"\n\nconst route = useRoute()\nconst router = useRouter()\nconst toast = useToast()\nconst t = useI18n()\n\nconst IMPORTER_INVALID_TYPE = \"importer_invalid_type\" as const\nconst IMPORTER_INVALID_FETCH = \"importer_invalid_fetch\" as const\n\n// TODO: move this to importers after moving the importer metadatas from respective components to imports/*.ts file\nconst URLImporters = [\n  {\n    id: \"hoppscotch\",\n    importer: hoppRESTImporter,\n  },\n  {\n    id: \"postman\",\n    importer: hoppPostmanImporter,\n  },\n  {\n    id: \"insomnia\",\n    importer: hoppInsomniaImporter,\n  },\n  {\n    id: \"openapi\",\n    importer: hoppOpenAPIImporter,\n  },\n]\n\nconst importCollections = (url: unknown, type: unknown) =>\n  pipe(\n    TE.Do,\n    TE.bind(\"importer\", () =>\n      pipe(\n        URLImporters,\n        RA.findFirst((importer) => importer.id === type),\n        TE.fromOption(() => IMPORTER_INVALID_TYPE)\n      )\n    ),\n    TE.bindW(\"content\", () =>\n      pipe(\n        url,\n        TO.fromPredicate(isOfType(\"string\")),\n        TO.chain(fetchUrlData),\n        TE.fromTaskOption(() => IMPORTER_INVALID_FETCH)\n      )\n    ),\n    TE.chainW(({ importer, content }) =>\n      pipe(\n        content.data,\n        TO.fromPredicate(isOfType(\"string\")),\n        TE.fromTaskOption(() => IMPORTER_INVALID_FILE_FORMAT),\n        TE.chain((data) => importer.importer([data]))\n      )\n    )\n  )\n\ntype ImportCollectionsError = TELeftType<ReturnType<typeof importCollections>>\n\nonMounted(async () => {\n  const { query } = route\n\n  const url = query.url\n  const type = query.type\n\n  const result = await importCollections(url, type)()\n\n  pipe(result, E.fold(handleImportFailure, handleImportSuccess))\n\n  router.replace(\"/\")\n})\n\nconst IMPORT_ERROR_MAP: Record<ImportCollectionsError, string> = {\n  [IMPORTER_INVALID_TYPE]: \"import.import_from_url_invalid_type\",\n  [IMPORTER_INVALID_FETCH]: \"import.import_from_url_invalid_fetch\",\n  [IMPORTER_INVALID_FILE_FORMAT]: \"import.import_from_url_invalid_file_format\",\n  [OPENAPI_DEREF_ERROR]: \"import.import_from_url_invalid_file_format\",\n} as const\n\nconst handleImportFailure = (error: ImportCollectionsError) => {\n  toast.error(t(IMPORT_ERROR_MAP[error]).toString())\n}\n\nconst handleImportSuccess = (collections: HoppCollection[]) => {\n  appendRESTCollections(collections)\n  toast.success(t(\"import.import_from_url_success\").toString())\n}\n\nconst fetchUrlData = (url: string) =>\n  TO.tryCatch(() =>\n    axios.get(url, {\n      responseType: \"text\",\n      transitional: { forcedJSONParsing: false },\n    })\n  )\n</script>\n"],"names":["isOfType","type","value","IMPORTER_INVALID_TYPE","IMPORTER_INVALID_FETCH","route","useRoute","router","useRouter","toast","useToast","t","useI18n","URLImporters","hoppRESTImporter","hoppPostmanImporter","hoppInsomniaImporter","hoppOpenAPIImporter","importCollections","url","pipe","TE.Do","TE.bind","RA.findFirst","importer","TE.fromOption","TE.bindW","TO.fromPredicate","TO.chain","fetchUrlData","TE.fromTaskOption","TE.chainW","content","IMPORTER_INVALID_FILE_FORMAT","TE.chain","data","onMounted","query","result","E.fold","handleImportFailure","handleImportSuccess","IMPORT_ERROR_MAP","OPENAPI_DEREF_ERROR","error","collections","appendRESTCollections","TO.tryCatch","axios"],"mappings":"gWAgCa,MAAAA,EACaC,GACvBC,GAEC,OAAOA,IAAUD,ECDrBE,EAAA,wBACAC,EAAA,uDANA,MAAAC,EAAAC,IACAC,EAAAC,IACAC,EAAAC,IACAC,EAAAC,IAMAC,EAAA,CAAqB,CACnB,GAAA,aACM,SAAAC,CACM,EACZ,CACA,GAAA,UACM,SAAAC,CACM,EACZ,CACA,GAAA,WACM,SAAAC,CACM,EACZ,CACA,GAAA,UACM,SAAAC,CACM,CACZ,EAGFC,EAAA,CAAAC,EAAAlB,IAAAmB,EACEC,EACKC,EACA,WAAK,IAAAF,EACNP,EACEU,EAAAC,GAAAA,EAAA,KAAAvB,CAAA,EAC+CwB,EAAA,IAAAtB,CAAA,CACN,CAC3C,EACFuB,EACG,UAAM,IAAAN,EACPD,EACEQ,EAAA3B,EAAA,QAAA,CAAA,EACmC4B,EAAAC,CAAA,EACdC,EAAA,IAAA1B,CAAA,CACyB,CAChD,EACF2B,EACG,CAAA,CAAA,SAAAP,EAAA,QAAAQ,CAAA,IAAAZ,EACDY,EAAA,KACUL,EAAA3B,EAAA,QAAA,CAAA,EAC2B8B,EAAA,IAAAG,CAAA,EACiBC,EAAAC,GAAAX,EAAA,SAAA,CAAAW,CAAA,CAAA,CAAA,CACR,CAC9C,CACF,EAKJC,EAAA,SAAA,CACE,KAAA,CAAA,MAAAC,CAAA,EAAAhC,EAEAc,EAAAkB,EAAA,IACApC,EAAAoC,EAAA,KAEAC,EAAA,MAAApB,EAAAC,EAAAlB,CAAA,EAAA,EAEAmB,EAAAkB,EAAAC,EAAAC,EAAAC,CAAA,CAAA,EAEAlC,EAAA,QAAA,GAAA,CAAkB,CAAA,EAGpB,MAAAmC,EAAA,CAAiE,CAAAvC,CAAA,EAAA,sCACtC,CAAAC,CAAA,EAAA,uCACC,CAAA6B,CAAA,EAAA,6CACM,CAAAU,CAAA,EAAA,4CACT,EAGzBH,EAAAI,GAAA,CACEnC,EAAA,MAAAE,EAAA+B,EAAAE,CAAA,CAAA,EAAA,SAAA,CAAA,CAAiD,EAGnDH,EAAAI,GAAA,CACEC,EAAAD,CAAA,EACApC,EAAA,QAAAE,EAAA,gCAAA,EAAA,SAAA,CAAA,CAA4D,EAG9DkB,EAAAV,GAAA4B,EACK,IAAAC,EAAA,IAAA7B,EAAA,CACc,aAAA,OACC,aAAA,CAAA,kBAAA,EAAA,CAC2B,CAAA,CAC1C"}