{"version":3,"file":"oauth.service-b346be9c.js","sources":["../../../hoppscotch-common/src/services/oauth/flows/authCode.ts","../../../hoppscotch-common/src/services/oauth/flows/implicit.ts","../../../hoppscotch-common/src/services/oauth/oauth.service.ts"],"sourcesContent":["import { PersistenceService } from \"~/services/persistence\"\nimport {\n  OauthAuthService,\n  PersistedOAuthConfig,\n  createFlowConfig,\n  decodeResponseAsJSON,\n  generateRandomString,\n} from \"../oauth.service\"\nimport { z } from \"zod\"\nimport { getService } from \"~/modules/dioc\"\nimport * as E from \"fp-ts/Either\"\nimport { InterceptorService } from \"~/services/interceptor.service\"\nimport { AuthCodeGrantTypeParams } from \"@hoppscotch/data\"\n\nconst persistenceService = getService(PersistenceService)\nconst interceptorService = getService(InterceptorService)\n\nconst AuthCodeOauthFlowParamsSchema = AuthCodeGrantTypeParams.pick({\n  authEndpoint: true,\n  tokenEndpoint: true,\n  clientID: true,\n  clientSecret: true,\n  scopes: true,\n  isPKCE: true,\n  codeVerifierMethod: true,\n})\n  .refine(\n    (params) => {\n      return (\n        params.authEndpoint.length >= 1 &&\n        params.tokenEndpoint.length >= 1 &&\n        params.clientID.length >= 1 &&\n        (!params.scopes || params.scopes.trim().length >= 1)\n      )\n    },\n    {\n      message: \"Minimum length requirement not met for one or more parameters\",\n    }\n  )\n  .refine((params) => (params.isPKCE ? !!params.codeVerifierMethod : true), {\n    message: \"codeVerifierMethod is required when using PKCE\",\n    path: [\"codeVerifierMethod\"],\n  })\n\nexport type AuthCodeOauthFlowParams = z.infer<\n  typeof AuthCodeOauthFlowParamsSchema\n>\n\nexport const getDefaultAuthCodeOauthFlowParams =\n  (): AuthCodeOauthFlowParams => ({\n    authEndpoint: \"\",\n    tokenEndpoint: \"\",\n    clientID: \"\",\n    clientSecret: \"\",\n    scopes: undefined,\n    isPKCE: false,\n    codeVerifierMethod: \"S256\",\n  })\n\nconst initAuthCodeOauthFlow = async ({\n  tokenEndpoint,\n  clientID,\n  clientSecret,\n  scopes,\n  authEndpoint,\n  isPKCE,\n  codeVerifierMethod,\n}: AuthCodeOauthFlowParams) => {\n  const state = generateRandomString()\n\n  let codeVerifier: string | undefined\n  let codeChallenge: string | undefined\n\n  if (isPKCE) {\n    codeVerifier = generateCodeVerifier()\n    codeChallenge = await generateCodeChallenge(\n      codeVerifier,\n      codeVerifierMethod\n    )\n  }\n\n  let oauthTempConfig: {\n    state: string\n    grant_type: \"AUTHORIZATION_CODE\"\n    authEndpoint: string\n    tokenEndpoint: string\n    clientSecret?: string\n    clientID: string\n    isPKCE: boolean\n    codeVerifier?: string\n    codeVerifierMethod?: string\n    codeChallenge?: string\n    scopes?: string\n  } = {\n    state,\n    grant_type: \"AUTHORIZATION_CODE\",\n    authEndpoint,\n    tokenEndpoint,\n    clientSecret,\n    clientID,\n    isPKCE,\n    codeVerifierMethod,\n    scopes,\n  }\n\n  if (codeVerifier && codeChallenge) {\n    oauthTempConfig = {\n      ...oauthTempConfig,\n      codeVerifier,\n      codeChallenge,\n    }\n  }\n\n  const localOAuthTempConfig =\n    persistenceService.getLocalConfig(\"oauth_temp_config\")\n\n  const persistedOAuthConfig: PersistedOAuthConfig = localOAuthTempConfig\n    ? { ...JSON.parse(localOAuthTempConfig) }\n    : {}\n\n  const { grant_type, ...rest } = oauthTempConfig\n\n  // persist the state so we can compare it when we get redirected back\n  // also persist the grant_type,tokenEndpoint and clientSecret so we can use them when we get redirected back\n  persistenceService.setLocalConfig(\n    \"oauth_temp_config\",\n    JSON.stringify(<PersistedOAuthConfig>{\n      ...persistedOAuthConfig,\n      fields: rest,\n      grant_type,\n    })\n  )\n\n  let url: URL\n\n  try {\n    url = new URL(authEndpoint)\n  } catch (e) {\n    return E.left(\"INVALID_AUTH_ENDPOINT\")\n  }\n\n  url.searchParams.set(\"grant_type\", \"authorization_code\")\n  url.searchParams.set(\"client_id\", clientID)\n  url.searchParams.set(\"state\", state)\n  url.searchParams.set(\"response_type\", \"code\")\n  url.searchParams.set(\"redirect_uri\", OauthAuthService.redirectURI)\n\n  if (scopes) url.searchParams.set(\"scope\", scopes)\n\n  if (codeVerifierMethod && codeChallenge) {\n    url.searchParams.set(\"code_challenge\", codeChallenge)\n    url.searchParams.set(\"code_challenge_method\", codeVerifierMethod)\n  }\n\n  // Redirect to the authorization server\n  window.location.assign(url.toString())\n\n  return E.right(undefined)\n}\n\nconst handleRedirectForAuthCodeOauthFlow = async (localConfig: string) => {\n  // parse the query string\n  const params = new URLSearchParams(window.location.search)\n\n  const code = params.get(\"code\")\n  const state = params.get(\"state\")\n  const error = params.get(\"error\")\n\n  if (error) {\n    return E.left(\"AUTH_SERVER_RETURNED_ERROR\")\n  }\n\n  if (!code) {\n    return E.left(\"AUTH_TOKEN_REQUEST_FAILED\")\n  }\n\n  const expectedSchema = z.object({\n    source: z.optional(z.string()),\n    state: z.string(),\n    tokenEndpoint: z.string(),\n    clientSecret: z.string(),\n    clientID: z.string(),\n    codeVerifier: z.string().optional(),\n    codeChallenge: z.string().optional(),\n  })\n\n  const decodedLocalConfig = expectedSchema.safeParse(\n    JSON.parse(localConfig).fields\n  )\n\n  if (!decodedLocalConfig.success) {\n    return E.left(\"INVALID_LOCAL_CONFIG\")\n  }\n\n  // check if the state matches\n  if (decodedLocalConfig.data.state !== state) {\n    return E.left(\"INVALID_STATE\")\n  }\n\n  // exchange the code for a token\n  const formData = new URLSearchParams()\n  formData.append(\"grant_type\", \"authorization_code\")\n  formData.append(\"code\", code)\n  formData.append(\"client_id\", decodedLocalConfig.data.clientID)\n  formData.append(\"client_secret\", decodedLocalConfig.data.clientSecret)\n  formData.append(\"redirect_uri\", OauthAuthService.redirectURI)\n\n  if (decodedLocalConfig.data.codeVerifier) {\n    formData.append(\"code_verifier\", decodedLocalConfig.data.codeVerifier)\n  }\n\n  const { response } = interceptorService.runRequest({\n    url: decodedLocalConfig.data.tokenEndpoint,\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      Accept: \"application/json\",\n    },\n    data: formData.toString(),\n  })\n\n  const res = await response\n\n  if (E.isLeft(res)) {\n    return E.left(\"AUTH_TOKEN_REQUEST_FAILED\" as const)\n  }\n\n  const responsePayload = decodeResponseAsJSON(res.right)\n\n  if (E.isLeft(responsePayload)) {\n    return E.left(\"AUTH_TOKEN_REQUEST_FAILED\" as const)\n  }\n\n  const withAccessTokenSchema = z.object({\n    access_token: z.string(),\n  })\n\n  const parsedTokenResponse = withAccessTokenSchema.safeParse(\n    responsePayload.right\n  )\n\n  return parsedTokenResponse.success\n    ? E.right(parsedTokenResponse.data)\n    : E.left(\"AUTH_TOKEN_REQUEST_INVALID_RESPONSE\" as const)\n}\n\nconst generateCodeVerifier = () => {\n  const characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~\"\n  const length = Math.floor(Math.random() * (128 - 43 + 1)) + 43 // Random length between 43 and 128\n  let codeVerifier = \"\"\n\n  for (let i = 0; i < length; i++) {\n    const randomIndex = Math.floor(Math.random() * characters.length)\n    codeVerifier += characters[randomIndex]\n  }\n\n  return codeVerifier\n}\n\nconst generateCodeChallenge = async (\n  codeVerifier: string,\n  strategy: AuthCodeOauthFlowParams[\"codeVerifierMethod\"]\n) => {\n  if (strategy === \"plain\") {\n    return codeVerifier\n  }\n\n  const encoder = new TextEncoder()\n  const data = encoder.encode(codeVerifier)\n\n  const buffer = await crypto.subtle.digest(\"SHA-256\", data)\n\n  return encodeArrayBufferAsUrlEncodedBase64(buffer)\n}\n\nconst encodeArrayBufferAsUrlEncodedBase64 = (buffer: ArrayBuffer) => {\n  const hashArray = Array.from(new Uint8Array(buffer))\n  const hashBase64URL = btoa(String.fromCharCode(...hashArray))\n    .replace(/=/g, \"\")\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n\n  return hashBase64URL\n}\n\nexport default createFlowConfig(\n  \"AUTHORIZATION_CODE\" as const,\n  AuthCodeOauthFlowParamsSchema,\n  initAuthCodeOauthFlow,\n  handleRedirectForAuthCodeOauthFlow\n)\n","import { PersistenceService } from \"~/services/persistence\"\nimport {\n  OauthAuthService,\n  PersistedOAuthConfig,\n  createFlowConfig,\n  generateRandomString,\n} from \"../oauth.service\"\nimport { z } from \"zod\"\nimport { getService } from \"~/modules/dioc\"\nimport * as E from \"fp-ts/Either\"\nimport { ImplicitOauthFlowParams } from \"@hoppscotch/data\"\n\nconst persistenceService = getService(PersistenceService)\n\nconst ImplicitOauthFlowParamsSchema = ImplicitOauthFlowParams.pick({\n  authEndpoint: true,\n  clientID: true,\n  scopes: true,\n}).refine((params) => {\n  return (\n    params.authEndpoint.length >= 1 &&\n    params.clientID.length >= 1 &&\n    (params.scopes === undefined || params.scopes.length >= 1)\n  )\n})\n\nexport type ImplicitOauthFlowParams = z.infer<\n  typeof ImplicitOauthFlowParamsSchema\n>\n\nexport const getDefaultImplicitOauthFlowParams =\n  (): ImplicitOauthFlowParams => ({\n    authEndpoint: \"\",\n    clientID: \"\",\n    scopes: undefined,\n  })\n\nconst initImplicitOauthFlow = async ({\n  clientID,\n  scopes,\n  authEndpoint,\n}: ImplicitOauthFlowParams) => {\n  const state = generateRandomString()\n\n  const localOAuthTempConfig =\n    persistenceService.getLocalConfig(\"oauth_temp_config\")\n\n  const persistedOAuthConfig: PersistedOAuthConfig = localOAuthTempConfig\n    ? { ...JSON.parse(localOAuthTempConfig) }\n    : {}\n\n  // Persist the necessary information for retrieval while getting redirected back\n  persistenceService.setLocalConfig(\n    \"oauth_temp_config\",\n    JSON.stringify(<PersistedOAuthConfig>{\n      ...persistedOAuthConfig,\n      fields: {\n        clientID,\n        authEndpoint,\n        scopes,\n        state,\n      },\n      grant_type: \"IMPLICIT\",\n    })\n  )\n\n  let url: URL\n\n  try {\n    url = new URL(authEndpoint)\n  } catch {\n    return E.left(\"INVALID_AUTH_ENDPOINT\")\n  }\n\n  url.searchParams.set(\"client_id\", clientID)\n  url.searchParams.set(\"state\", state)\n  url.searchParams.set(\"response_type\", \"token\")\n  url.searchParams.set(\"redirect_uri\", OauthAuthService.redirectURI)\n\n  if (scopes) url.searchParams.set(\"scope\", scopes)\n\n  // Redirect to the authorization server\n  window.location.assign(url.toString())\n\n  return E.right(undefined)\n}\n\nconst handleRedirectForAuthCodeOauthFlow = async (localConfig: string) => {\n  // parse the query string\n  const params = new URLSearchParams(window.location.search)\n  const paramsFromHash = new URLSearchParams(window.location.hash.substring(1))\n\n  const accessToken =\n    params.get(\"access_token\") || paramsFromHash.get(\"access_token\")\n  const state = params.get(\"state\") || paramsFromHash.get(\"state\")\n  const error = params.get(\"error\") || paramsFromHash.get(\"error\")\n\n  if (error) {\n    return E.left(\"AUTH_SERVER_RETURNED_ERROR\")\n  }\n\n  if (!accessToken) {\n    return E.left(\"AUTH_TOKEN_REQUEST_FAILED\")\n  }\n\n  const expectedSchema = z.object({\n    source: z.optional(z.string()),\n    state: z.string(),\n    clientID: z.string(),\n  })\n\n  const decodedLocalConfig = expectedSchema.safeParse(\n    JSON.parse(localConfig).fields\n  )\n\n  if (!decodedLocalConfig.success) {\n    return E.left(\"INVALID_LOCAL_CONFIG\")\n  }\n\n  // check if the state matches\n  if (decodedLocalConfig.data.state !== state) {\n    return E.left(\"INVALID_STATE\")\n  }\n\n  return E.right({\n    access_token: accessToken,\n  })\n}\n\nexport default createFlowConfig(\n  \"IMPLICIT\" as const,\n  ImplicitOauthFlowParamsSchema,\n  initImplicitOauthFlow,\n  handleRedirectForAuthCodeOauthFlow\n)\n","import { Service } from \"dioc\"\nimport { PersistenceService } from \"../persistence\"\nimport { ZodType, z } from \"zod\"\nimport * as E from \"fp-ts/Either\"\nimport authCode, { AuthCodeOauthFlowParams } from \"./flows/authCode\"\nimport implicit, { ImplicitOauthFlowParams } from \"./flows/implicit\"\nimport { getService } from \"~/modules/dioc\"\nimport { HoppCollection } from \"@hoppscotch/data\"\nimport { TeamCollection } from \"~/helpers/backend/graphql\"\n\nexport type PersistedOAuthConfig = {\n  source: \"REST\" | \"GraphQL\"\n  context?: {\n    type: \"collection-properties\" | \"request-tab\"\n    metadata: {\n      collection?: HoppCollection | TeamCollection\n      collectionID?: string\n    }\n  }\n  grant_type: string\n  fields?: (AuthCodeOauthFlowParams | ImplicitOauthFlowParams) & {\n    state: string\n  }\n  token?: string\n}\n\nconst persistenceService = getService(PersistenceService)\n\nexport const grantTypesInvolvingRedirect = [\"AUTHORIZATION_CODE\", \"IMPLICIT\"]\n\nexport const routeOAuthRedirect = async () => {\n  // get the temp data from the local storage\n  const localOAuthTempConfig =\n    persistenceService.getLocalConfig(\"oauth_temp_config\")\n\n  if (!localOAuthTempConfig) {\n    return E.left(\"INVALID_STATE\")\n  }\n\n  const expectedSchema = z.object({\n    source: z.optional(z.string()),\n    grant_type: z.string(),\n  })\n\n  const decodedLocalConfig = expectedSchema.safeParse(\n    JSON.parse(localOAuthTempConfig)\n  )\n\n  if (!decodedLocalConfig.success) {\n    return E.left(\"INVALID_STATE\")\n  }\n\n  // route the request to the correct flow\n  const flowConfig = [authCode, implicit].find(\n    (flow) => flow.flow === decodedLocalConfig.data.grant_type\n  )\n\n  if (!flowConfig) {\n    return E.left(\"INVALID_STATE\")\n  }\n\n  return flowConfig?.onRedirectReceived(localOAuthTempConfig)\n}\n\nexport function createFlowConfig<\n  Flow extends string,\n  AuthParams extends Record<string, unknown>,\n  InitFuncReturnObject extends Record<string, unknown>,\n>(\n  flow: Flow,\n  params: ZodType<AuthParams>,\n  init: (\n    params: AuthParams\n  ) =>\n    | E.Either<string, InitFuncReturnObject>\n    | Promise<E.Either<string, InitFuncReturnObject>>\n    | E.Either<string, undefined>\n    | Promise<E.Either<string, undefined>>,\n  onRedirectReceived: (localConfig: string) => Promise<\n    E.Either<\n      string,\n      {\n        access_token: string\n      }\n    >\n  >\n) {\n  return {\n    flow,\n    params,\n    init,\n    onRedirectReceived,\n  }\n}\n\nexport const decodeResponseAsJSON = (response: { data: any }) => {\n  try {\n    const responsePayload = new TextDecoder(\"utf-8\")\n      .decode(response.data as any)\n      .replaceAll(\"\\x00\", \"\")\n\n    return E.right(JSON.parse(responsePayload) as Record<string, unknown>)\n  } catch (error) {\n    return E.left(\"AUTH_TOKEN_REQUEST_FAILED\" as const)\n  }\n}\n\nexport class OauthAuthService extends Service {\n  public static readonly ID = \"OAUTH_AUTH_SERVICE\"\n\n  static redirectURI = `${window.location.origin}/oauth`\n}\n\nexport const generateRandomString = () => {\n  const length = 64\n  const possible =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n  const values = crypto.getRandomValues(new Uint8Array(length))\n  return values.reduce((acc, x) => acc + possible[x % possible.length], \"\")\n}\n"],"names":["persistenceService","getService","PersistenceService","interceptorService","InterceptorService","AuthCodeOauthFlowParamsSchema","AuthCodeGrantTypeParams","params","getDefaultAuthCodeOauthFlowParams","initAuthCodeOauthFlow","tokenEndpoint","clientID","clientSecret","scopes","authEndpoint","isPKCE","codeVerifierMethod","state","generateRandomString","codeVerifier","codeChallenge","generateCodeVerifier","generateCodeChallenge","oauthTempConfig","localOAuthTempConfig","persistedOAuthConfig","grant_type","rest","url","E.left","OauthAuthService","E.right","handleRedirectForAuthCodeOauthFlow","localConfig","code","decodedLocalConfig","z","formData","response","res","E.isLeft","responsePayload","decodeResponseAsJSON","parsedTokenResponse","characters","length","i","randomIndex","strategy","data","buffer","encodeArrayBufferAsUrlEncodedBase64","hashArray","authCode","createFlowConfig","ImplicitOauthFlowParamsSchema","ImplicitOauthFlowParams","getDefaultImplicitOauthFlowParams","initImplicitOauthFlow","paramsFromHash","accessToken","implicit","grantTypesInvolvingRedirect","routeOAuthRedirect","flowConfig","flow","init","onRedirectReceived","Service","__publicField","possible","acc","x"],"mappings":"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"}