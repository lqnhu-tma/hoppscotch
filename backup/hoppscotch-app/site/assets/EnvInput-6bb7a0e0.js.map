{"version":3,"file":"EnvInput-6bb7a0e0.js","sources":["../../../hoppscotch-common/src/components/app/Inspection.vue","../../../hoppscotch-common/src/components/smart/EnvInput.vue"],"sourcesContent":["<template>\n  <div v-if=\"inspectionResults && inspectionResults.length > 0\">\n    <tippy interactive trigger=\"click\" theme=\"popover\">\n      <div class=\"flex flex-1 flex-col items-center justify-center\">\n        <HoppButtonSecondary\n          v-tippy=\"{ theme: 'tooltip' }\"\n          :icon=\"IconAlertTriangle\"\n          :class=\"severityColor(getHighestSeverity.severity)\"\n          :title=\"t('inspections.description')\"\n        />\n      </div>\n      <template #content=\"{ hide }\">\n        <div class=\"flex flex-1 flex-col items-start space-y-2\">\n          <div\n            class=\"sticky top-0 flex justify-between self-stretch rounded border border-divider bg-popover pl-2\"\n          >\n            <span class=\"flex flex-1 items-center\">\n              <icon-lucide-activity class=\"svg-icons mr-2 text-accent\" />\n              <span class=\"font-bold\">\n                {{ t(\"inspections.title\") }}\n              </span>\n            </span>\n            <HoppButtonSecondary\n              v-tippy=\"{ theme: 'tooltip' }\"\n              to=\"https://docs.hoppscotch.io/documentation/features/inspections\"\n              blank\n              :title=\"t('app.wiki')\"\n              :icon=\"IconHelpCircle\"\n            />\n          </div>\n          <div\n            v-for=\"(inspector, index) in inspectionResults\"\n            :key=\"index\"\n            class=\"flex w-full max-w-md self-stretch\"\n          >\n            <div\n              class=\"flex flex-1 flex-col divide-y divide-dashed divide-dividerDark rounded border border-dashed border-dividerDark\"\n            >\n              <span\n                v-if=\"inspector.text.type === 'text'\"\n                class=\"flex-1 px-3 py-2\"\n              >\n                {{ inspector.text.text }}\n                <HoppSmartLink\n                  blank\n                  :to=\"inspector.doc.link\"\n                  class=\"text-accent transition hover:text-accentDark\"\n                >\n                  {{ inspector.doc.text }}\n                  <icon-lucide-arrow-up-right class=\"svg-icons\" />\n                </HoppSmartLink>\n              </span>\n              <span v-if=\"inspector.action\" class=\"flex space-x-2 p-2\">\n                <HoppButtonSecondary\n                  :label=\"inspector.action.text\"\n                  outline\n                  filled\n                  @click=\"\n                    () => {\n                      inspector.action?.apply()\n                      hide()\n                    }\n                  \"\n                />\n              </span>\n            </div>\n          </div>\n        </div>\n      </template>\n    </tippy>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { InspectorResult } from \"~/services/inspection\"\nimport IconAlertTriangle from \"~icons/lucide/alert-triangle\"\nimport IconHelpCircle from \"~icons/lucide/help-circle\"\nimport { computed } from \"vue\"\nimport { useI18n } from \"~/composables/i18n\"\n\nconst t = useI18n()\n\nconst props = defineProps<{\n  inspectionResults: InspectorResult[] | undefined\n}>()\n\nconst getHighestSeverity = computed(() => {\n  if (props.inspectionResults) {\n    return props.inspectionResults.reduce(\n      (prev, curr) => {\n        return prev.severity > curr.severity ? prev : curr\n      },\n      { severity: 0 }\n    )\n  }\n  return { severity: 0 }\n})\n\nconst severityColor = (severity: number) => {\n  switch (severity) {\n    case 1:\n      return \"!text-green-500 hover:!text-green-600\"\n    case 2:\n      return \"!text-yellow-500 hover:!text-yellow-600\"\n    case 3:\n      return \"!text-red-500 hover:!text-red-600\"\n    default:\n      return \"!text-gray-500 hover:!text-gray-600\"\n  }\n}\n</script>\n","<template>\n  <div ref=\"autoCompleteWrapper\" class=\"autocomplete-wrapper\">\n    <div\n      class=\"no-scrollbar absolute inset-0 flex flex-1 divide-x divide-dividerLight overflow-x-auto\"\n    >\n      <input\n        v-if=\"isSecret\"\n        id=\"secret\"\n        v-model=\"secretText\"\n        name=\"secret\"\n        :placeholder=\"t('environment.secret_value')\"\n        class=\"flex flex-1 bg-transparent px-4\"\n        :class=\"styles\"\n        type=\"password\"\n      />\n      <div\n        v-else\n        ref=\"editor\"\n        :placeholder=\"placeholder\"\n        class=\"flex flex-1\"\n        :class=\"styles\"\n        @click=\"emit('click', $event)\"\n        @keydown=\"handleKeystroke\"\n        @focusin=\"showSuggestionPopover = true\"\n      />\n      <HoppButtonSecondary\n        v-if=\"secret\"\n        v-tippy=\"{ theme: 'tooltip' }\"\n        :title=\"isSecret ? t('action.show_secret') : t('action.hide_secret')\"\n        :icon=\"isSecret ? IconEyeoff : IconEye\"\n        @click=\"toggleSecret\"\n      />\n      <AppInspection\n        :inspection-results=\"inspectionResults\"\n        class=\"sticky inset-y-0 right-0 rounded-r bg-primary\"\n      />\n    </div>\n    <ul\n      v-if=\"\n        showSuggestionPopover && autoCompleteSource && suggestions.length > 0\n      \"\n      ref=\"suggestionsMenu\"\n      class=\"suggestions\"\n    >\n      <li\n        v-for=\"(suggestion, index) in suggestions\"\n        :key=\"`suggestion-${index}`\"\n        :class=\"{ active: currentSuggestionIndex === index }\"\n        @click=\"updateModelValue(suggestion)\"\n      >\n        <span class=\"truncate py-0.5\">\n          {{ suggestion }}\n        </span>\n        <div\n          v-if=\"currentSuggestionIndex === index\"\n          class=\"hidden items-center text-secondary md:flex\"\n        >\n          <kbd class=\"shortcut-key\">Enter</kbd>\n          <span class=\"ml-2 truncate\">to select</span>\n        </div>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, watch, nextTick, computed, Ref } from \"vue\"\nimport {\n  EditorView,\n  placeholder as placeholderExt,\n  ViewPlugin,\n  ViewUpdate,\n  keymap,\n  tooltips,\n} from \"@codemirror/view\"\nimport { EditorSelection, EditorState, Extension } from \"@codemirror/state\"\nimport { clone } from \"lodash-es\"\nimport { history, historyKeymap } from \"@codemirror/commands\"\nimport { inputTheme } from \"~/helpers/editor/themes/baseTheme\"\nimport { HoppReactiveEnvPlugin } from \"~/helpers/editor/extensions/HoppEnvironment\"\nimport { useReadonlyStream } from \"@composables/stream\"\nimport { AggregateEnvironment, aggregateEnvs$ } from \"~/newstore/environments\"\nimport { platform } from \"~/platform\"\nimport { onClickOutside, useDebounceFn } from \"@vueuse/core\"\nimport { InspectorResult } from \"~/services/inspection\"\nimport { invokeAction } from \"~/helpers/actions\"\nimport { useI18n } from \"~/composables/i18n\"\nimport IconEye from \"~icons/lucide/eye\"\nimport IconEyeoff from \"~icons/lucide/eye-off\"\nimport { CompletionContext, autocompletion } from \"@codemirror/autocomplete\"\nimport { useService } from \"dioc/vue\"\nimport { RESTTabService } from \"~/services/tab/rest\"\nimport { syntaxTree } from \"@codemirror/language\"\n\nconst t = useI18n()\n\nconst props = withDefaults(\n  defineProps<{\n    modelValue?: string\n    placeholder?: string\n    styles?: string\n    envs?: AggregateEnvironment[] | null\n    focus?: boolean\n    selectTextOnMount?: boolean\n    environmentHighlights?: boolean\n    readonly?: boolean\n    autoCompleteSource?: string[]\n    inspectionResults?: InspectorResult[] | undefined\n    contextMenuEnabled?: boolean\n    secret?: boolean\n    autoCompleteEnv?: boolean\n  }>(),\n  {\n    modelValue: \"\",\n    placeholder: \"\",\n    styles: \"\",\n    envs: null,\n    focus: false,\n    readonly: false,\n    environmentHighlights: true,\n    autoCompleteSource: undefined,\n    inspectionResult: undefined,\n    inspectionResults: undefined,\n    contextMenuEnabled: true,\n    secret: false,\n    autoCompleteEnvSource: false,\n  }\n)\n\nconst emit = defineEmits<{\n  (e: \"update:modelValue\", data: string): void\n  (e: \"change\", data: string): void\n  (e: \"paste\", data: { prevValue: string; pastedValue: string }): void\n  (e: \"enter\", ev: any): void\n  (e: \"keyup\", ev: any): void\n  (e: \"keydown\", ev: any): void\n  (e: \"click\", ev: any): void\n}>()\n\nconst cachedValue = ref(props.modelValue)\n\nconst view = ref<EditorView>()\n\nconst editor = ref<any | null>(null)\n\nconst currentSuggestionIndex = ref(-1)\nconst showSuggestionPopover = ref(false)\n\nconst suggestionsMenu = ref<any | null>(null)\nconst autoCompleteWrapper = ref<any | null>(null)\n\nconst isSecret = ref(props.secret)\n\nconst secretText = ref(props.modelValue)\n\nwatch(\n  () => secretText.value,\n  (newVal) => {\n    if (isSecret.value) {\n      updateModelValue(newVal)\n    }\n  }\n)\n\nonClickOutside(autoCompleteWrapper, () => {\n  showSuggestionPopover.value = false\n})\n\nconst toggleSecret = () => {\n  isSecret.value = !isSecret.value\n}\n\n//filter autocompleteSource with unique values\nconst uniqueAutoCompleteSource = computed(() => {\n  if (props.autoCompleteSource) {\n    return [...new Set(props.autoCompleteSource)]\n  }\n  return []\n})\n\nconst suggestions = computed(() => {\n  if (\n    props.modelValue &&\n    props.modelValue.length > 0 &&\n    uniqueAutoCompleteSource.value &&\n    uniqueAutoCompleteSource.value.length > 0\n  ) {\n    return uniqueAutoCompleteSource.value.filter((suggestion) =>\n      suggestion.toLowerCase().includes(props.modelValue.toLowerCase())\n    )\n  }\n  return uniqueAutoCompleteSource.value ?? []\n})\n\nconst updateModelValue = (value: string) => {\n  emit(\"update:modelValue\", value)\n  emit(\"change\", value)\n  nextTick(() => {\n    showSuggestionPopover.value = false\n  })\n}\n\n// close the context menu when the input is empty\nwatch(\n  () => props.modelValue,\n  (newVal) => {\n    if (!newVal) {\n      invokeAction(\"contextmenu.open\", {\n        position: {\n          top: 0,\n          left: 0,\n        },\n        text: null,\n      })\n    }\n  }\n)\n\nconst handleKeystroke = (ev: KeyboardEvent) => {\n  if ([\"ArrowDown\", \"ArrowUp\", \"Enter\", \"Escape\"].includes(ev.key)) {\n    ev.preventDefault()\n  }\n\n  if ([\"Escape\", \"Tab\", \"Shift\"].includes(ev.key)) {\n    showSuggestionPopover.value = false\n  }\n\n  if (ev.key === \"Enter\") {\n    if (suggestions.value.length > 0 && currentSuggestionIndex.value > -1) {\n      updateModelValue(suggestions.value[currentSuggestionIndex.value])\n      currentSuggestionIndex.value = -1\n\n      //used to set codemirror cursor at the end of the line after selecting a suggestion\n      nextTick(() => {\n        view.value?.dispatch({\n          selection: EditorSelection.create([\n            EditorSelection.range(\n              props.modelValue.length,\n              props.modelValue.length\n            ),\n          ]),\n        })\n      })\n    }\n\n    if (showSuggestionPopover.value) {\n      showSuggestionPopover.value = false\n    } else {\n      emit(\"enter\", ev)\n    }\n  } else {\n    showSuggestionPopover.value = true\n  }\n\n  if (ev.key === \"ArrowDown\") {\n    scrollActiveElIntoView()\n\n    currentSuggestionIndex.value =\n      currentSuggestionIndex.value < suggestions.value.length - 1\n        ? currentSuggestionIndex.value + 1\n        : suggestions.value.length - 1\n\n    emit(\"keydown\", ev)\n  }\n\n  if (ev.key === \"ArrowUp\") {\n    scrollActiveElIntoView()\n\n    currentSuggestionIndex.value =\n      currentSuggestionIndex.value - 1 >= 0\n        ? currentSuggestionIndex.value - 1\n        : 0\n\n    emit(\"keyup\", ev)\n  }\n\n  // used to scroll to the first suggestion when left arrow is pressed\n  if (ev.key === \"ArrowLeft\") {\n    if (suggestions.value.length > 0) {\n      currentSuggestionIndex.value = 0\n      nextTick(() => {\n        scrollActiveElIntoView()\n      })\n    }\n  }\n\n  // used to scroll to the last suggestion when right arrow is pressed\n  if (ev.key === \"ArrowRight\") {\n    if (suggestions.value.length > 0) {\n      currentSuggestionIndex.value = suggestions.value.length - 1\n      nextTick(() => {\n        scrollActiveElIntoView()\n      })\n    }\n  }\n}\n\n// reset currentSuggestionIndex showSuggestionPopover is false\nwatch(\n  () => showSuggestionPopover.value,\n  (newVal) => {\n    if (!newVal) {\n      currentSuggestionIndex.value = -1\n    }\n  }\n)\n\n/**\n * Used to scroll the active suggestion into view\n */\nconst scrollActiveElIntoView = () => {\n  const suggestionsMenuEl = suggestionsMenu.value\n  if (suggestionsMenuEl) {\n    const activeSuggestionEl = suggestionsMenuEl.querySelector(\".active\")\n    if (activeSuggestionEl) {\n      activeSuggestionEl.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"center\",\n        inline: \"start\",\n      })\n    }\n  }\n}\n\nwatch(\n  () => props.modelValue,\n  (newVal) => {\n    const singleLinedText = newVal.replaceAll(\"\\n\", \"\")\n\n    const currDoc = view.value?.state.doc\n      .toJSON()\n      .join(view.value.state.lineBreak)\n\n    if (cachedValue.value !== singleLinedText || newVal !== currDoc) {\n      cachedValue.value = singleLinedText\n\n      view.value?.dispatch({\n        filter: false,\n        changes: {\n          from: 0,\n          to: view.value.state.doc.length,\n          insert: singleLinedText,\n        },\n      })\n    }\n  },\n  {\n    immediate: true,\n    flush: \"sync\",\n  }\n)\n\nlet clipboardEv: ClipboardEvent | null = null\nlet pastedValue: string | null = null\n\nconst aggregateEnvs = useReadonlyStream(aggregateEnvs$, []) as Ref<\n  AggregateEnvironment[]\n>\n\nconst tabs = useService(RESTTabService)\n\nconst envVars = computed(() => {\n  if (props.envs) {\n    return props.envs.map((x) => {\n      const { key, secret } = x\n      const value = secret ? \"********\" : x.value\n      const sourceEnv = \"sourceEnv\" in x ? x.sourceEnv : null\n      return {\n        key,\n        value,\n        sourceEnv,\n        secret,\n      }\n    })\n  }\n  return [\n    ...tabs.currentActiveTab.value.document.request.requestVariables.map(\n      ({ active, key, value }) =>\n        active\n          ? {\n              key,\n              value,\n              sourceEnv: \"RequestVariable\",\n              secret: false,\n            }\n          : ({} as AggregateEnvironment)\n    ),\n    ...aggregateEnvs.value,\n  ]\n})\n\nfunction envAutoCompletion(context: CompletionContext) {\n  const options = (envVars.value ?? [])\n    .map((env) => ({\n      label: env?.key ? `<<${env.key}>>` : \"\",\n      info: env?.value ?? \"\",\n      apply: env?.key ? `<<${env.key}>>` : \"\",\n    }))\n    .filter((x) => x)\n\n  const nodeBefore = syntaxTree(context.state).resolveInner(context.pos, -1)\n  const textBefore = context.state.sliceDoc(nodeBefore.from, context.pos)\n  const tagBefore = /<<\\w*$/.exec(textBefore)\n  if (!tagBefore && !context.explicit) return null\n  return {\n    from: tagBefore ? nodeBefore.from + tagBefore.index : context.pos,\n    options: options,\n    validFor: /^(<<\\w*)?$/,\n  }\n}\n\nconst envTooltipPlugin = new HoppReactiveEnvPlugin(envVars, view)\n\nfunction handleTextSelection() {\n  const selection = view.value?.state.selection.main\n  if (selection) {\n    const { from, to } = selection\n    if (from === to) return\n    const text = view.value?.state.doc.sliceString(from, to)\n    const coords = view.value?.coordsAtPos(from)\n    const top = coords?.top ?? 0\n    const left = coords?.left ?? 0\n    if (text) {\n      invokeAction(\"contextmenu.open\", {\n        position: {\n          top,\n          left,\n        },\n        text,\n      })\n      showSuggestionPopover.value = false\n    } else {\n      invokeAction(\"contextmenu.open\", {\n        position: {\n          top,\n          left,\n        },\n        text: null,\n      })\n    }\n  }\n}\n\n// Debounce to prevent double click from selecting the word\nconst debouncedTextSelection = (time: number) =>\n  useDebounceFn(() => {\n    handleTextSelection()\n  }, time)\n\nconst initView = (el: any) => {\n  // Only add event listeners if context menu is enabled in the component\n  if (props.contextMenuEnabled) {\n    el.addEventListener(\"mouseup\", debouncedTextSelection(140))\n    el.addEventListener(\"keyup\", debouncedTextSelection(140))\n  }\n\n  const extensions: Extension = getExtensions(props.readonly || isSecret.value)\n  view.value = new EditorView({\n    parent: el,\n    state: EditorState.create({\n      doc: props.modelValue,\n      extensions,\n    }),\n  })\n}\n\nconst getExtensions = (readonly: boolean): Extension => {\n  const extensions: Extension = [\n    EditorView.contentAttributes.of({ \"aria-label\": props.placeholder }),\n    EditorView.contentAttributes.of({ \"data-enable-grammarly\": \"false\" }),\n    EditorView.updateListener.of((update) => {\n      if (readonly) {\n        update.view.contentDOM.inputMode = \"none\"\n      }\n    }),\n    EditorState.changeFilter.of(() => !readonly),\n    inputTheme,\n    readonly\n      ? EditorView.theme({\n          \".cm-content\": {\n            caretColor: \"var(--secondary-dark-color)\",\n            color: \"var(--secondary-dark-color)\",\n            backgroundColor: \"var(--divider-color)\",\n            opacity: 0.25,\n          },\n        })\n      : EditorView.theme({}),\n    tooltips({\n      parent: document.body,\n      position: \"absolute\",\n    }),\n    props.environmentHighlights ? envTooltipPlugin : [],\n    placeholderExt(props.placeholder),\n    EditorView.domEventHandlers({\n      paste(ev) {\n        clipboardEv = ev\n        pastedValue = ev.clipboardData?.getData(\"text\") ?? \"\"\n      },\n      drop(ev) {\n        ev.preventDefault()\n      },\n      scroll(event) {\n        if (event.target && props.contextMenuEnabled) {\n          // Debounce to make the performance better\n          debouncedTextSelection(30)()\n        }\n      },\n    }),\n    props.autoCompleteEnv\n      ? autocompletion({\n          activateOnTyping: true,\n          override: [envAutoCompletion],\n        })\n      : [],\n    ViewPlugin.fromClass(\n      class {\n        update(update: ViewUpdate) {\n          if (readonly) return\n\n          if (update.docChanged) {\n            const prevValue = clone(cachedValue.value)\n\n            cachedValue.value = update.state.doc\n              .toJSON()\n              .join(update.state.lineBreak)\n\n            // We do not update the cache directly in this case (to trigger value watcher to dispatch)\n            // So, we desync cachedValue a bit so we can trigger updates\n            const value = clone(cachedValue.value).replaceAll(\"\\n\", \"\")\n\n            emit(\"update:modelValue\", value)\n            emit(\"change\", value)\n\n            const pasted = !!update.transactions.find((txn) =>\n              txn.isUserEvent(\"input.paste\")\n            )\n\n            if (pasted && clipboardEv) {\n              const pastedVal = pastedValue\n              nextTick(() => {\n                emit(\"paste\", {\n                  pastedValue: pastedVal!,\n                  prevValue,\n                })\n              })\n            } else {\n              clipboardEv = null\n              pastedValue = null\n            }\n\n            if (props.contextMenuEnabled) {\n              // close the context menu if text is being updated in the editor\n              invokeAction(\"contextmenu.open\", {\n                position: {\n                  top: 0,\n                  left: 0,\n                },\n                text: null,\n              })\n            }\n          }\n        }\n      }\n    ),\n    history(),\n    keymap.of([...historyKeymap]),\n  ]\n  return extensions\n}\n\nconst triggerTextSelection = () => {\n  nextTick(() => {\n    view.value?.focus()\n    view.value?.dispatch({\n      selection: EditorSelection.create([\n        EditorSelection.range(0, props.modelValue.length),\n      ]),\n    })\n  })\n}\nonMounted(() => {\n  if (editor.value) {\n    if (!view.value) initView(editor.value)\n    if (props.selectTextOnMount) triggerTextSelection()\n    if (props.focus) view.value?.focus()\n    platform.ui?.onCodemirrorInstanceMount?.(editor.value)\n  }\n})\n\nwatch(editor, () => {\n  if (editor.value) {\n    if (!view.value) initView(editor.value)\n    if (props.selectTextOnMount) triggerTextSelection()\n  } else {\n    view.value?.destroy()\n    view.value = undefined\n  }\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.autocomplete-wrapper {\n  @apply relative;\n  @apply flex;\n  @apply flex-1;\n  @apply flex-shrink-0;\n  @apply whitespace-nowrap py-4;\n\n  .suggestions {\n    @apply absolute;\n    @apply bg-popover;\n    @apply z-50;\n    @apply shadow-lg;\n    @apply max-h-46;\n    @apply border-x border-b border-divider;\n    @apply overflow-y-auto;\n    @apply -left-[1px];\n    @apply -right-[1px];\n\n    top: calc(100% + 1px);\n    border-radius: 0 0 8px 8px;\n\n    li {\n      @apply flex;\n      @apply items-center;\n      @apply justify-between;\n      @apply w-full;\n      @apply px-4 py-2;\n      @apply text-secondary;\n      @apply cursor-pointer;\n\n      &:last-child {\n        border-radius: 0 0 0 8px;\n      }\n\n      &:hover,\n      &.active {\n        @apply bg-primaryDark;\n        @apply text-secondaryDark;\n        @apply cursor-pointer;\n      }\n    }\n  }\n}\n</style>\n"],"names":["t","useI18n","props","__props","getHighestSeverity","computed","prev","curr","severityColor","severity","emit","__emit","cachedValue","ref","view","editor","currentSuggestionIndex","showSuggestionPopover","suggestionsMenu","autoCompleteWrapper","isSecret","secretText","watch","newVal","updateModelValue","onClickOutside","toggleSecret","uniqueAutoCompleteSource","suggestions","suggestion","value","nextTick","invokeAction","handleKeystroke","ev","_a","EditorSelection","scrollActiveElIntoView","suggestionsMenuEl","activeSuggestionEl","singleLinedText","currDoc","_b","clipboardEv","pastedValue","aggregateEnvs","useReadonlyStream","aggregateEnvs$","tabs","useService","RESTTabService","envVars","x","key","secret","sourceEnv","active","envAutoCompletion","context","options","env","nodeBefore","syntaxTree","textBefore","tagBefore","envTooltipPlugin","HoppReactiveEnvPlugin","handleTextSelection","selection","from","to","text","coords","_c","top","left","debouncedTextSelection","time","useDebounceFn","initView","el","extensions","getExtensions","EditorView","EditorState","readonly","update","inputTheme","tooltips","placeholderExt","event","autocompletion","ViewPlugin","prevValue","clone","txn","pastedVal","history","keymap","historyKeymap","triggerTextSelection","onMounted","platform"],"mappings":"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"}