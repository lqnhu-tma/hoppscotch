{"version":3,"file":"Communication-3ed9aea8.js","sources":["../../../hoppscotch-common/src/components/realtime/Communication.vue"],"sourcesContent":["<template>\n  <div\n    class=\"flex flex-1 flex-col\"\n    :class=\"{ eventFeildShown: showEventField }\"\n  >\n    <div\n      v-if=\"showEventField\"\n      class=\"sticky z-10 flex flex-shrink-0 items-center justify-center overflow-x-auto border-b border-dividerLight bg-primary\"\n      :class=\"eventFieldStyles\"\n    >\n      <icon-lucide-rss class=\"svg-icons mx-4 text-accentLight\" />\n      <input\n        id=\"event_name\"\n        v-model=\"eventName\"\n        class=\"w-full truncate bg-primary py-2 pr-4\"\n        name=\"event_name\"\n        :placeholder=\"`${t('socketio.event_name')}`\"\n        type=\"text\"\n        autocomplete=\"off\"\n      />\n    </div>\n    <div\n      class=\"sticky z-10 flex flex-shrink-0 items-center justify-between overflow-x-auto border-b border-dividerLight bg-primary pl-4\"\n      :class=\"stickyHeaderStyles\"\n    >\n      <span class=\"flex items-center\">\n        <label class=\"truncate font-semibold text-secondaryLight\">\n          {{ t(\"websocket.message\") }}\n        </label>\n        <tippy\n          interactive\n          trigger=\"click\"\n          theme=\"popover\"\n          :on-shown=\"() => tippyActions.focus()\"\n        >\n          <HoppSmartSelectWrapper>\n            <HoppButtonSecondary\n              :label=\"contentType || t('state.none').toLowerCase()\"\n              class=\"ml-2 rounded-none pr-8\"\n            />\n          </HoppSmartSelectWrapper>\n          <template #content=\"{ hide }\">\n            <div\n              ref=\"tippyActions\"\n              class=\"flex flex-col focus:outline-none\"\n              tabindex=\"0\"\n              @keyup.escape=\"hide()\"\n            >\n              <HoppSmartItem\n                v-for=\"(contentTypeItem, index) in validContentTypes\"\n                :key=\"`contentTypeItem-${index}`\"\n                :label=\"contentTypeItem\"\n                :info-icon=\"\n                  contentTypeItem === contentType ? IconDone : undefined\n                \"\n                :active-info-icon=\"contentTypeItem === contentType\"\n                @click=\"\n                  () => {\n                    contentType = contentTypeItem\n                    hide()\n                  }\n                \"\n              />\n            </div>\n          </template>\n        </tippy>\n      </span>\n      <div class=\"flex\">\n        <HoppButtonSecondary\n          v-tippy=\"{ theme: 'tooltip', delay: [500, 20], allowHTML: true }\"\n          :title=\"`${t(\n            'request.run'\n          )} <kbd>${getSpecialKey()}</kbd><kbd>â†©</kbd>`\"\n          :label=\"`${t('action.send')}`\"\n          :disabled=\"!communicationBody || !isConnected\"\n          :icon=\"IconSend\"\n          class=\"!hover:text-accentDark rounded-none !text-accent\"\n          @click=\"sendMessage()\"\n        />\n        <HoppSmartCheckbox\n          v-tippy=\"{ theme: 'tooltip' }\"\n          :on=\"clearInputOnSend\"\n          class=\"px-2\"\n          :title=\"`${t('mqtt.clear_input_on_send')}`\"\n          @change=\"clearInputOnSend = !clearInputOnSend\"\n        >\n          {{ t(\"mqtt.clear_input\") }}\n        </HoppSmartCheckbox>\n        <HoppButtonSecondary\n          v-tippy=\"{ theme: 'tooltip' }\"\n          to=\"https://docs.hoppscotch.io/documentation/features/realtime-api-testing\"\n          blank\n          :title=\"t('app.wiki')\"\n          :icon=\"IconHelpCircle\"\n        />\n        <HoppButtonSecondary\n          v-tippy=\"{ theme: 'tooltip' }\"\n          :title=\"t('action.clear')\"\n          :icon=\"IconTrash2\"\n          @click=\"clearContent\"\n        />\n        <HoppButtonSecondary\n          v-tippy=\"{ theme: 'tooltip' }\"\n          :title=\"t('state.linewrap')\"\n          :class=\"{ '!text-accent': linewrapEnabled }\"\n          :icon=\"IconWrapText\"\n          @click.prevent=\"linewrapEnabled = !linewrapEnabled\"\n        />\n        <HoppButtonSecondary\n          v-if=\"contentType && contentType == 'JSON'\"\n          v-tippy=\"{ theme: 'tooltip' }\"\n          :title=\"t('action.prettify')\"\n          :icon=\"prettifyIcon\"\n          @click=\"prettifyRequestBody\"\n        />\n        <label for=\"payload\">\n          <HoppButtonSecondary\n            v-tippy=\"{ theme: 'tooltip' }\"\n            :title=\"t('import.title')\"\n            :icon=\"IconFilePlus\"\n            @click=\"payload!.click()\"\n          />\n        </label>\n        <input\n          ref=\"payload\"\n          class=\"input\"\n          name=\"payload\"\n          type=\"file\"\n          @change=\"uploadPayload\"\n        />\n      </div>\n    </div>\n    <div class=\"h-full\">\n      <div ref=\"wsCommunicationBody\" class=\"flex flex-1 flex-col\"></div>\n    </div>\n  </div>\n</template>\n<script setup lang=\"ts\">\nimport { Component, computed, reactive, ref } from \"vue\"\nimport IconSend from \"~icons/lucide/send\"\nimport IconHelpCircle from \"~icons/lucide/help-circle\"\nimport IconWrapText from \"~icons/lucide/wrap-text\"\nimport IconTrash2 from \"~icons/lucide/trash-2\"\nimport IconWand2 from \"~icons/lucide/wand-2\"\nimport IconCheck from \"~icons/lucide/check\"\nimport IconInfo from \"~icons/lucide/info\"\nimport IconDone from \"~icons/lucide/check\"\nimport IconFilePlus from \"~icons/lucide/file-plus\"\nimport { pipe } from \"fp-ts/function\"\nimport * as TO from \"fp-ts/TaskOption\"\nimport * as O from \"fp-ts/Option\"\nimport { refAutoReset } from \"@vueuse/core\"\nimport { useCodemirror } from \"@composables/codemirror\"\nimport jsonLinter from \"@helpers/editor/linting/json\"\nimport { readFileAsText } from \"@functional/files\"\nimport { useI18n } from \"@composables/i18n\"\nimport { useToast } from \"@composables/toast\"\nimport { isJSONContentType } from \"@helpers/utils/contenttypes\"\nimport { defineActionHandler } from \"~/helpers/actions\"\nimport { getPlatformSpecialKey as getSpecialKey } from \"~/helpers/platformutils\"\n\ndefineProps({\n  showEventField: {\n    type: Boolean,\n    default: false,\n  },\n  eventFieldStyles: {\n    type: String,\n    default: \"\",\n  },\n  stickyHeaderStyles: {\n    type: String,\n    default: \"\",\n  },\n  isConnected: {\n    type: Boolean,\n    default: false,\n  },\n})\n\nconst emit = defineEmits<{\n  (\n    e: \"send-message\",\n    body: {\n      eventName: string\n      message: string\n    }\n  ): void\n}>()\n\nconst t = useI18n()\nconst toast = useToast()\n\n// Template refs\nconst tippyActions = ref<any | null>(null)\nconst linewrapEnabled = ref(true)\nconst wsCommunicationBody = ref<HTMLElement>()\nconst payload = ref<HTMLInputElement>()\n\nconst prettifyIcon = refAutoReset<Component>(IconWand2, 1000)\nconst clearInputOnSend = ref(false)\n\nconst knownContentTypes = {\n  JSON: \"application/ld+json\",\n  Raw: \"text/plain\",\n} as const\n\nconst validContentTypes = Object.keys(knownContentTypes) as [\"JSON\", \"Raw\"]\n\nconst contentType = ref<keyof typeof knownContentTypes>(\"JSON\")\nconst eventName = ref(\"\")\nconst communicationBody = ref(\"\")\n\nconst rawInputEditorLang = computed(() => knownContentTypes[contentType.value])\nconst langLinter = computed(() =>\n  isJSONContentType(contentType.value) ? jsonLinter : null\n)\n\nuseCodemirror(\n  wsCommunicationBody,\n  communicationBody,\n  reactive({\n    extendedEditorConfig: {\n      lineWrapping: linewrapEnabled,\n      mode: rawInputEditorLang,\n      placeholder: t(\"websocket.message\").toString(),\n    },\n    linter: langLinter,\n    completer: null,\n    environmentHighlights: true,\n  })\n)\n\nconst clearContent = () => {\n  if (clearInputOnSend.value) {\n    communicationBody.value = \"\"\n    eventName.value = \"\"\n  }\n}\n\nconst sendMessage = () => {\n  if (!communicationBody.value) return\n\n  emit(\"send-message\", {\n    eventName: eventName.value,\n    message: communicationBody.value,\n  })\n  clearContent()\n}\n\nconst uploadPayload = async (e: Event) => {\n  const result = await pipe(\n    (e.target as HTMLInputElement).files?.[0],\n    TO.fromNullable,\n    TO.chain(readFileAsText)\n  )()\n\n  if (O.isSome(result)) {\n    communicationBody.value = result.value\n    toast.success(`${t(\"state.file_imported\")}`)\n  } else {\n    toast.error(`${t(\"action.choose_file\")}`)\n  }\n}\nconst prettifyRequestBody = () => {\n  try {\n    const jsonObj = JSON.parse(communicationBody.value)\n    communicationBody.value = JSON.stringify(jsonObj, null, 2)\n    prettifyIcon.value = IconCheck\n  } catch (e) {\n    console.error(e)\n    prettifyIcon.value = IconInfo\n    toast.error(`${t(\"error.json_prettify_invalid_body\")}`)\n  }\n}\n\ndefineActionHandler(\"request.send-cancel\", sendMessage)\n</script>\n\n<style lang=\"scss\" scoped>\n:deep(.cm-panels) {\n  @apply top-upperSecondaryStickyFold #{!important};\n}\n\n.eventFeildShown :deep(.cm-panels),\n.cmResponsePrimaryStickyFold :deep(.cm-panels) {\n  @apply top-upperTertiaryStickyFold #{!important};\n}\n\n.cmResponseSecondaryStickyFold :deep(.cm-panels) {\n  @apply top-upperFourthStickyFold #{!important};\n}\n</style>\n"],"names":["emit","__emit","useI18n","toast","useToast","tippyActions","ref","linewrapEnabled","wsCommunicationBody","payload","prettifyIcon","refAutoReset","IconWand2","clearInputOnSend","knownContentTypes","validContentTypes","contentType","eventName","communicationBody","rawInputEditorLang","computed","langLinter","isJSONContentType","jsonLinter","useCodemirror","reactive","clearContent","sendMessage","uploadPayload","e","result","pipe","_a","TO.fromNullable","TO.chain","readFileAsText","O.isSome","prettifyRequestBody","jsonObj","IconCheck","IconInfo","defineActionHandler"],"mappings":"mlDAoLA,MAAAA,EAAAC,EAUA,EAAAC,IACAC,EAAAC,KAGAC,EAAAC,EAAA,IAAA,EACAC,EAAAD,EAAA,EAAA,EACAE,EAAAF,IACAG,EAAAH,IAEAI,EAAAC,EAAAC,GAAA,GAAA,EACAC,EAAAP,EAAA,EAAA,EAEAQ,EAAA,CAA0B,KAAA,sBAClB,IAAA,YACD,EAGPC,EAAA,OAAA,KAAAD,CAAA,EAEAE,EAAAV,EAAA,MAAA,EACAW,EAAAX,EAAA,EAAA,EACAY,EAAAZ,EAAA,EAAA,EAEAa,EAAAC,EAAA,IAAAN,EAAAE,EAAA,KAAA,CAAA,EACAK,EAAAD,EAAmB,IAAAE,GAAAN,EAAA,KAAA,EAAAO,GAAA,IACmC,EAGtDC,EAAAhB,EACEU,EACAO,EAAA,CACS,qBAAA,CACe,aAAAlB,EACN,KAAAY,EACR,YAAA,EAAA,mBAAA,EAAA,SAAA,CACuC,EAC/C,OAAAE,EACQ,UAAA,KACG,sBAAA,EACY,CAAA,CACxB,EAGH,MAAAK,EAAA,IAAA,CACEb,EAAA,QACEK,EAAA,MAAA,GACAD,EAAA,MAAA,GACF,EAGFU,EAAA,IAAA,CACET,EAAA,QAEAlB,EAAA,eAAA,CAAqB,UAAAiB,EAAA,MACE,QAAAC,EAAA,KACM,CAAA,EAE7BQ,IAAa,EAGfE,EAAA,MAAAC,GAAA,OACE,MAAAC,EAAA,MAAAC,IAAqBC,EAAAH,EAAA,OAAA,QAAA,YAAAG,EAAA,GACqBC,GACrCC,GAAAC,EAAA,CACoB,IAGzBC,GAAAN,CAAA,GACEZ,EAAA,MAAAY,EAAA,MACA3B,EAAA,QAAA,GAAA,EAAA,qBAAA,CAAA,EAAA,GAEAA,EAAA,MAAA,GAAA,EAAA,oBAAA,CAAA,EAAA,CACF,EAEFkC,EAAA,IAAA,CACE,GAAA,CACE,MAAAC,EAAA,KAAA,MAAApB,EAAA,KAAA,EACAA,EAAA,MAAA,KAAA,UAAAoB,EAAA,KAAA,CAAA,EACA5B,EAAA,MAAA6B,CAAqB,OAAAV,EAAA,CAErB,QAAA,MAAAA,CAAA,EACAnB,EAAA,MAAA8B,GACArC,EAAA,MAAA,GAAA,EAAA,kCAAA,CAAA,EAAA,CAAsD,CACxD,EAGF,OAAAsC,EAAA,sBAAAd,CAAA"}