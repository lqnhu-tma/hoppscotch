{"version":3,"file":"RawLensRenderer-36c2fd6e.js","sources":["../../../hoppscotch-common/src/components/lenses/renderers/RawLensRenderer.vue"],"sourcesContent":["<template>\n  <div class=\"flex flex-1 flex-col\">\n    <div\n      class=\"sticky top-lowerSecondaryStickyFold z-10 flex flex-shrink-0 items-center justify-between overflow-x-auto border-b border-dividerLight bg-primary pl-4\"\n    >\n      <label class=\"truncate font-semibold text-secondaryLight\">\n        {{ t(\"response.body\") }}\n      </label>\n      <div class=\"flex\">\n        <HoppButtonSecondary\n          v-if=\"response.body\"\n          v-tippy=\"{ theme: 'tooltip' }\"\n          :title=\"t('state.linewrap')\"\n          :class=\"{ '!text-accent': WRAP_LINES }\"\n          :icon=\"IconWrapText\"\n          @click.prevent=\"toggleNestedSetting('WRAP_LINES', 'httpResponseBody')\"\n        />\n        <HoppButtonSecondary\n          v-if=\"response.body\"\n          v-tippy=\"{ theme: 'tooltip', allowHTML: true }\"\n          :title=\"`${t(\n            'action.download_file'\n          )} <kbd>${getSpecialKey()}</kbd><kbd>J</kbd>`\"\n          :icon=\"downloadIcon\"\n          @click=\"downloadResponse\"\n        />\n        <HoppButtonSecondary\n          v-if=\"response.body\"\n          v-tippy=\"{ theme: 'tooltip', allowHTML: true }\"\n          :title=\"`${t(\n            'action.copy'\n          )} <kbd>${getSpecialKey()}</kbd><kbd>.</kbd>`\"\n          :icon=\"copyIcon\"\n          @click=\"copyResponse\"\n        />\n      </div>\n    </div>\n    <div class=\"h-full relative overflow-auto\">\n      <div ref=\"rawResponse\" class=\"absolute inset-0\"></div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport IconWrapText from \"~icons/lucide/wrap-text\"\nimport { ref, computed, reactive } from \"vue\"\nimport { flow, pipe } from \"fp-ts/function\"\nimport * as S from \"fp-ts/string\"\nimport * as RNEA from \"fp-ts/ReadonlyNonEmptyArray\"\nimport * as A from \"fp-ts/Array\"\nimport * as O from \"fp-ts/Option\"\nimport { useCodemirror } from \"@composables/codemirror\"\nimport { HoppRESTResponse } from \"~/helpers/types/HoppRESTResponse\"\nimport { useI18n } from \"@composables/i18n\"\nimport {\n  useResponseBody,\n  useDownloadResponse,\n  useCopyResponse,\n} from \"@composables/lens-actions\"\nimport { objFieldMatches } from \"~/helpers/functional/object\"\nimport { defineActionHandler } from \"~/helpers/actions\"\nimport { getPlatformSpecialKey as getSpecialKey } from \"~/helpers/platformutils\"\nimport { useNestedSetting } from \"~/composables/settings\"\nimport { toggleNestedSetting } from \"~/newstore/settings\"\n\nconst t = useI18n()\n\nconst props = defineProps<{\n  response: HoppRESTResponse & { type: \"success\" | \"fail\" }\n}>()\n\nconst { responseBodyText } = useResponseBody(props.response)\n\nconst rawResponseBody = computed(() =>\n  props.response.type === \"fail\" || props.response.type === \"success\"\n    ? props.response.body\n    : new ArrayBuffer(0)\n)\n\nconst responseType = computed(() =>\n  pipe(\n    props.response,\n    O.fromPredicate(objFieldMatches(\"type\", [\"fail\", \"success\"] as const)),\n    O.chain(\n      // Try getting content-type\n      flow(\n        (res) => res.headers,\n        A.findFirst((h) => h.key.toLowerCase() === \"content-type\"),\n        O.map(flow((h) => h.value, S.split(\";\"), RNEA.head, S.toLowerCase))\n      )\n    ),\n    O.getOrElse(() => \"text/plain\")\n  )\n)\n\nconst { downloadIcon, downloadResponse } = useDownloadResponse(\n  responseType.value,\n  rawResponseBody\n)\n\nconst { copyIcon, copyResponse } = useCopyResponse(responseBodyText)\n\nconst rawResponse = ref<any | null>(null)\nconst WRAP_LINES = useNestedSetting(\"WRAP_LINES\", \"httpResponseBody\")\n\nuseCodemirror(\n  rawResponse,\n  responseBodyText,\n  reactive({\n    extendedEditorConfig: {\n      mode: \"text/plain\",\n      readOnly: true,\n      lineWrapping: WRAP_LINES,\n    },\n    linter: null,\n    completer: null,\n    environmentHighlights: true,\n  })\n)\n\ndefineActionHandler(\"response.file.download\", () => downloadResponse())\ndefineActionHandler(\"response.copy\", () => copyResponse())\n</script>\n\n<style lang=\"scss\" scoped>\n:deep(.cm-panels) {\n  @apply top-lowerTertiaryStickyFold #{!important};\n}\n</style>\n"],"names":["t","useI18n","props","__props","responseBodyText","useResponseBody","rawResponseBody","computed","responseType","pipe","O.fromPredicate","objFieldMatches","O.chain","flow","res","A.findFirst","h","O.map","S.split","RNEA.head","S.toLowerCase","O.getOrElse","downloadIcon","downloadResponse","useDownloadResponse","copyIcon","copyResponse","useCopyResponse","rawResponse","ref","WRAP_LINES","useNestedSetting","useCodemirror","reactive","defineActionHandler"],"mappings":"q1BAiEA,MAAAA,EAAAC,IAEAC,EAAAC,EAIA,CAAA,iBAAAC,CAAA,EAAAC,EAAAH,EAAA,QAAA,EAEAI,EAAAC,EAAwB,IAAAL,EAAA,SAAA,OAAA,QAAAA,EAAA,SAAA,OAAA,UAAAA,EAAA,SAAA,KAAA,IAAA,YAAA,CAAA,CAGD,EAGvBM,EAAAD,EAAqB,IAAAE,EACnBP,EAAA,SACQQ,EAAAC,EAAA,OAAA,CAAA,OAAA,SAAA,CAAA,CAAA,EAC+DC,EACnEC,EAEAC,GAAAA,EAAA,QACeC,EAAAC,GAAAA,EAAA,IAAA,YAAA,IAAA,cAAA,EAC4CC,EAAAJ,EAAAG,GAAAA,EAAA,MAAAE,EAAA,GAAA,EAAAC,EAAAC,CAAA,CAAA,CACS,CACpE,EACFC,EAAA,IAAA,YAAA,CAC8B,CAChC,EAGF,CAAA,aAAAC,EAAA,iBAAAC,CAAA,EAAAC,EAA2ChB,EAAA,MAC5BF,CACb,EAGF,CAAA,SAAAmB,EAAA,aAAAC,CAAA,EAAAC,EAAAvB,CAAA,EAEAwB,EAAAC,EAAA,IAAA,EACAC,EAAAC,EAAA,aAAA,kBAAA,EAEA,OAAAC,EAAAJ,EACExB,EACA6B,EAAA,CACS,qBAAA,CACe,KAAA,aACd,SAAA,GACI,aAAAH,CACI,EAChB,OAAA,KACQ,UAAA,KACG,sBAAA,EACY,CAAA,CACxB,EAGHI,EAAA,yBAAA,IAAAX,EAAA,CAAA,EACAW,EAAA,gBAAA,IAAAR,EAAA,CAAA"}